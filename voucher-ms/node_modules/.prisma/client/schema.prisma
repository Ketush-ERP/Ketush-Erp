// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoucherType {
  FACTURA_A
  FACTURA_B
  NOTA_CREDITO_A
  NOTA_CREDITO_B
  NOTA_DEBITO_A
  NOTA_DEBITO_B
  PRESUPUESTO
}

enum ConditionPayment {
  CASH
  CREDIT
}

enum PaymentMethod {
  EFECTIVO
  DOLAR
  CHEQUE
  TRANSFERENCIA
  TARJETA
}

enum VoucherStatus {
  PENDING
  SENT
  REJECTED
}

enum Currency {
  ARS
  USD
  EUR
}

model EVoucher {
  id String @id @default(uuid())

  arcaCae     String?
  arcaDueDate String?

  type          VoucherType
  pointOfSale   Int
  voucherNumber Int

  emissionDate DateTime  @default(now())
  dueDate      DateTime?

  status VoucherStatus @default(PENDING)

  contactId String?

  products EVoucherProduct[]

  conditionPayment ConditionPayment?

  totalAmount Float?
  ivaAmount   Float?
  paidAmount  Float  @default(0)

  observation String?

  available Boolean @default(true)

  afipRequestData  Json?
  afipResponseData Json?

  associatedVoucherNumber Float?
  associatedVoucherType   VoucherType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Payments EPayment[] @relation("VoucherPayments")

  @@index([type, emissionDate]) // útil para reportes o filtros por tipo y fecha
  @@index([contactId, status]) // útil para ver vouchers de un cliente y su estado
}

model EVoucherProduct {
  id          String   @id @default(uuid())
  code        String
  voucherId   String
  voucher     EVoucher @relation(fields: [voucherId], references: [id])
  description String
  productId   String // ID referenciado del producto (de otro microservicio)
  quantity    Int

  price Float

  @@index([voucherId, productId]) // si hacés búsquedas por ambos juntos
}

model EBank {
  id   String @id @default(uuid())
  name String

  account  String? // Número de cuenta
  cbu      String? // CBU (Argentina)
  currency Currency // Moneda de la cuenta

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  available Boolean    @default(true)
  payments  EPayment[] @relation("BankPayments")

  @@index([name, currency])
}

model ECard {
  id String @id @default(uuid())

  available Boolean    @default(true)
  payments  EPayment[] @relation("CardPayments")

  commissionPercentage Int?

  @@index([id, commissionPercentage])
}

model EPayment {
  id        String   @id @default(uuid())
  voucherId String
  voucher   EVoucher @relation("VoucherPayments", fields: [voucherId], references: [id])

  method     PaymentMethod
  amount     Float
  currency   Currency
  receivedAt DateTime      @default(now())

  bankId String?
  bank   EBank?  @relation("BankPayments", fields: [bankId], references: [id])

  cardId String?
  card   ECard?  @relation("CardPayments", fields: [cardId], references: [id])

  available Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([voucherId, method])
  @@index([receivedAt]) // útil para consultas por fecha de pagos
}
