
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model EVoucher
 * 
 */
export type EVoucher = $Result.DefaultSelection<Prisma.$EVoucherPayload>
/**
 * Model EVoucherProduct
 * 
 */
export type EVoucherProduct = $Result.DefaultSelection<Prisma.$EVoucherProductPayload>
/**
 * Model EBank
 * 
 */
export type EBank = $Result.DefaultSelection<Prisma.$EBankPayload>
/**
 * Model ECard
 * 
 */
export type ECard = $Result.DefaultSelection<Prisma.$ECardPayload>
/**
 * Model EPayment
 * 
 */
export type EPayment = $Result.DefaultSelection<Prisma.$EPaymentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const VoucherType: {
  FACTURA_A: 'FACTURA_A',
  FACTURA_B: 'FACTURA_B',
  NOTA_CREDITO_A: 'NOTA_CREDITO_A',
  NOTA_CREDITO_B: 'NOTA_CREDITO_B',
  NOTA_DEBITO_A: 'NOTA_DEBITO_A',
  NOTA_DEBITO_B: 'NOTA_DEBITO_B',
  PRESUPUESTO: 'PRESUPUESTO'
};

export type VoucherType = (typeof VoucherType)[keyof typeof VoucherType]


export const ConditionPayment: {
  CASH: 'CASH',
  CREDIT: 'CREDIT'
};

export type ConditionPayment = (typeof ConditionPayment)[keyof typeof ConditionPayment]


export const PaymentMethod: {
  EFECTIVO: 'EFECTIVO',
  DOLAR: 'DOLAR',
  CHEQUE: 'CHEQUE',
  TRANSFERENCIA: 'TRANSFERENCIA',
  TARJETA: 'TARJETA'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const VoucherStatus: {
  PENDING: 'PENDING',
  SENT: 'SENT',
  REJECTED: 'REJECTED'
};

export type VoucherStatus = (typeof VoucherStatus)[keyof typeof VoucherStatus]


export const Currency: {
  ARS: 'ARS',
  USD: 'USD',
  EUR: 'EUR'
};

export type Currency = (typeof Currency)[keyof typeof Currency]

}

export type VoucherType = $Enums.VoucherType

export const VoucherType: typeof $Enums.VoucherType

export type ConditionPayment = $Enums.ConditionPayment

export const ConditionPayment: typeof $Enums.ConditionPayment

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type VoucherStatus = $Enums.VoucherStatus

export const VoucherStatus: typeof $Enums.VoucherStatus

export type Currency = $Enums.Currency

export const Currency: typeof $Enums.Currency

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more EVouchers
 * const eVouchers = await prisma.eVoucher.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more EVouchers
   * const eVouchers = await prisma.eVoucher.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.eVoucher`: Exposes CRUD operations for the **EVoucher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EVouchers
    * const eVouchers = await prisma.eVoucher.findMany()
    * ```
    */
  get eVoucher(): Prisma.EVoucherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eVoucherProduct`: Exposes CRUD operations for the **EVoucherProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EVoucherProducts
    * const eVoucherProducts = await prisma.eVoucherProduct.findMany()
    * ```
    */
  get eVoucherProduct(): Prisma.EVoucherProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eBank`: Exposes CRUD operations for the **EBank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EBanks
    * const eBanks = await prisma.eBank.findMany()
    * ```
    */
  get eBank(): Prisma.EBankDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eCard`: Exposes CRUD operations for the **ECard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ECards
    * const eCards = await prisma.eCard.findMany()
    * ```
    */
  get eCard(): Prisma.ECardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ePayment`: Exposes CRUD operations for the **EPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EPayments
    * const ePayments = await prisma.ePayment.findMany()
    * ```
    */
  get ePayment(): Prisma.EPaymentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    EVoucher: 'EVoucher',
    EVoucherProduct: 'EVoucherProduct',
    EBank: 'EBank',
    ECard: 'ECard',
    EPayment: 'EPayment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "eVoucher" | "eVoucherProduct" | "eBank" | "eCard" | "ePayment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      EVoucher: {
        payload: Prisma.$EVoucherPayload<ExtArgs>
        fields: Prisma.EVoucherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EVoucherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EVoucherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload>
          }
          findFirst: {
            args: Prisma.EVoucherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EVoucherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload>
          }
          findMany: {
            args: Prisma.EVoucherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload>[]
          }
          create: {
            args: Prisma.EVoucherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload>
          }
          createMany: {
            args: Prisma.EVoucherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EVoucherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload>[]
          }
          delete: {
            args: Prisma.EVoucherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload>
          }
          update: {
            args: Prisma.EVoucherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload>
          }
          deleteMany: {
            args: Prisma.EVoucherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EVoucherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EVoucherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload>[]
          }
          upsert: {
            args: Prisma.EVoucherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherPayload>
          }
          aggregate: {
            args: Prisma.EVoucherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEVoucher>
          }
          groupBy: {
            args: Prisma.EVoucherGroupByArgs<ExtArgs>
            result: $Utils.Optional<EVoucherGroupByOutputType>[]
          }
          count: {
            args: Prisma.EVoucherCountArgs<ExtArgs>
            result: $Utils.Optional<EVoucherCountAggregateOutputType> | number
          }
        }
      }
      EVoucherProduct: {
        payload: Prisma.$EVoucherProductPayload<ExtArgs>
        fields: Prisma.EVoucherProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EVoucherProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EVoucherProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload>
          }
          findFirst: {
            args: Prisma.EVoucherProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EVoucherProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload>
          }
          findMany: {
            args: Prisma.EVoucherProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload>[]
          }
          create: {
            args: Prisma.EVoucherProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload>
          }
          createMany: {
            args: Prisma.EVoucherProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EVoucherProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload>[]
          }
          delete: {
            args: Prisma.EVoucherProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload>
          }
          update: {
            args: Prisma.EVoucherProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload>
          }
          deleteMany: {
            args: Prisma.EVoucherProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EVoucherProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EVoucherProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload>[]
          }
          upsert: {
            args: Prisma.EVoucherProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVoucherProductPayload>
          }
          aggregate: {
            args: Prisma.EVoucherProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEVoucherProduct>
          }
          groupBy: {
            args: Prisma.EVoucherProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<EVoucherProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.EVoucherProductCountArgs<ExtArgs>
            result: $Utils.Optional<EVoucherProductCountAggregateOutputType> | number
          }
        }
      }
      EBank: {
        payload: Prisma.$EBankPayload<ExtArgs>
        fields: Prisma.EBankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EBankFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EBankFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload>
          }
          findFirst: {
            args: Prisma.EBankFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EBankFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload>
          }
          findMany: {
            args: Prisma.EBankFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload>[]
          }
          create: {
            args: Prisma.EBankCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload>
          }
          createMany: {
            args: Prisma.EBankCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EBankCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload>[]
          }
          delete: {
            args: Prisma.EBankDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload>
          }
          update: {
            args: Prisma.EBankUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload>
          }
          deleteMany: {
            args: Prisma.EBankDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EBankUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EBankUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload>[]
          }
          upsert: {
            args: Prisma.EBankUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBankPayload>
          }
          aggregate: {
            args: Prisma.EBankAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEBank>
          }
          groupBy: {
            args: Prisma.EBankGroupByArgs<ExtArgs>
            result: $Utils.Optional<EBankGroupByOutputType>[]
          }
          count: {
            args: Prisma.EBankCountArgs<ExtArgs>
            result: $Utils.Optional<EBankCountAggregateOutputType> | number
          }
        }
      }
      ECard: {
        payload: Prisma.$ECardPayload<ExtArgs>
        fields: Prisma.ECardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ECardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ECardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload>
          }
          findFirst: {
            args: Prisma.ECardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ECardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload>
          }
          findMany: {
            args: Prisma.ECardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload>[]
          }
          create: {
            args: Prisma.ECardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload>
          }
          createMany: {
            args: Prisma.ECardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ECardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload>[]
          }
          delete: {
            args: Prisma.ECardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload>
          }
          update: {
            args: Prisma.ECardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload>
          }
          deleteMany: {
            args: Prisma.ECardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ECardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ECardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload>[]
          }
          upsert: {
            args: Prisma.ECardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ECardPayload>
          }
          aggregate: {
            args: Prisma.ECardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateECard>
          }
          groupBy: {
            args: Prisma.ECardGroupByArgs<ExtArgs>
            result: $Utils.Optional<ECardGroupByOutputType>[]
          }
          count: {
            args: Prisma.ECardCountArgs<ExtArgs>
            result: $Utils.Optional<ECardCountAggregateOutputType> | number
          }
        }
      }
      EPayment: {
        payload: Prisma.$EPaymentPayload<ExtArgs>
        fields: Prisma.EPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload>
          }
          findFirst: {
            args: Prisma.EPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload>
          }
          findMany: {
            args: Prisma.EPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload>[]
          }
          create: {
            args: Prisma.EPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload>
          }
          createMany: {
            args: Prisma.EPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EPaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload>[]
          }
          delete: {
            args: Prisma.EPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload>
          }
          update: {
            args: Prisma.EPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload>
          }
          deleteMany: {
            args: Prisma.EPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EPaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload>[]
          }
          upsert: {
            args: Prisma.EPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EPaymentPayload>
          }
          aggregate: {
            args: Prisma.EPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEPayment>
          }
          groupBy: {
            args: Prisma.EPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<EPaymentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    eVoucher?: EVoucherOmit
    eVoucherProduct?: EVoucherProductOmit
    eBank?: EBankOmit
    eCard?: ECardOmit
    ePayment?: EPaymentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EVoucherCountOutputType
   */

  export type EVoucherCountOutputType = {
    products: number
    Payments: number
  }

  export type EVoucherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | EVoucherCountOutputTypeCountProductsArgs
    Payments?: boolean | EVoucherCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * EVoucherCountOutputType without action
   */
  export type EVoucherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherCountOutputType
     */
    select?: EVoucherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EVoucherCountOutputType without action
   */
  export type EVoucherCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EVoucherProductWhereInput
  }

  /**
   * EVoucherCountOutputType without action
   */
  export type EVoucherCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EPaymentWhereInput
  }


  /**
   * Count Type EBankCountOutputType
   */

  export type EBankCountOutputType = {
    payments: number
  }

  export type EBankCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | EBankCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * EBankCountOutputType without action
   */
  export type EBankCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBankCountOutputType
     */
    select?: EBankCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EBankCountOutputType without action
   */
  export type EBankCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EPaymentWhereInput
  }


  /**
   * Count Type ECardCountOutputType
   */

  export type ECardCountOutputType = {
    payments: number
  }

  export type ECardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | ECardCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * ECardCountOutputType without action
   */
  export type ECardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECardCountOutputType
     */
    select?: ECardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ECardCountOutputType without action
   */
  export type ECardCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EPaymentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model EVoucher
   */

  export type AggregateEVoucher = {
    _count: EVoucherCountAggregateOutputType | null
    _avg: EVoucherAvgAggregateOutputType | null
    _sum: EVoucherSumAggregateOutputType | null
    _min: EVoucherMinAggregateOutputType | null
    _max: EVoucherMaxAggregateOutputType | null
  }

  export type EVoucherAvgAggregateOutputType = {
    pointOfSale: number | null
    voucherNumber: number | null
    totalAmount: number | null
    ivaAmount: number | null
    paidAmount: number | null
    associatedVoucherNumber: number | null
  }

  export type EVoucherSumAggregateOutputType = {
    pointOfSale: number | null
    voucherNumber: number | null
    totalAmount: number | null
    ivaAmount: number | null
    paidAmount: number | null
    associatedVoucherNumber: number | null
  }

  export type EVoucherMinAggregateOutputType = {
    id: string | null
    arcaCae: string | null
    arcaDueDate: string | null
    type: $Enums.VoucherType | null
    pointOfSale: number | null
    voucherNumber: number | null
    emissionDate: Date | null
    dueDate: Date | null
    status: $Enums.VoucherStatus | null
    contactId: string | null
    conditionPayment: $Enums.ConditionPayment | null
    totalAmount: number | null
    ivaAmount: number | null
    paidAmount: number | null
    observation: string | null
    available: boolean | null
    associatedVoucherNumber: number | null
    associatedVoucherType: $Enums.VoucherType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EVoucherMaxAggregateOutputType = {
    id: string | null
    arcaCae: string | null
    arcaDueDate: string | null
    type: $Enums.VoucherType | null
    pointOfSale: number | null
    voucherNumber: number | null
    emissionDate: Date | null
    dueDate: Date | null
    status: $Enums.VoucherStatus | null
    contactId: string | null
    conditionPayment: $Enums.ConditionPayment | null
    totalAmount: number | null
    ivaAmount: number | null
    paidAmount: number | null
    observation: string | null
    available: boolean | null
    associatedVoucherNumber: number | null
    associatedVoucherType: $Enums.VoucherType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EVoucherCountAggregateOutputType = {
    id: number
    arcaCae: number
    arcaDueDate: number
    type: number
    pointOfSale: number
    voucherNumber: number
    emissionDate: number
    dueDate: number
    status: number
    contactId: number
    conditionPayment: number
    totalAmount: number
    ivaAmount: number
    paidAmount: number
    observation: number
    available: number
    afipRequestData: number
    afipResponseData: number
    associatedVoucherNumber: number
    associatedVoucherType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EVoucherAvgAggregateInputType = {
    pointOfSale?: true
    voucherNumber?: true
    totalAmount?: true
    ivaAmount?: true
    paidAmount?: true
    associatedVoucherNumber?: true
  }

  export type EVoucherSumAggregateInputType = {
    pointOfSale?: true
    voucherNumber?: true
    totalAmount?: true
    ivaAmount?: true
    paidAmount?: true
    associatedVoucherNumber?: true
  }

  export type EVoucherMinAggregateInputType = {
    id?: true
    arcaCae?: true
    arcaDueDate?: true
    type?: true
    pointOfSale?: true
    voucherNumber?: true
    emissionDate?: true
    dueDate?: true
    status?: true
    contactId?: true
    conditionPayment?: true
    totalAmount?: true
    ivaAmount?: true
    paidAmount?: true
    observation?: true
    available?: true
    associatedVoucherNumber?: true
    associatedVoucherType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EVoucherMaxAggregateInputType = {
    id?: true
    arcaCae?: true
    arcaDueDate?: true
    type?: true
    pointOfSale?: true
    voucherNumber?: true
    emissionDate?: true
    dueDate?: true
    status?: true
    contactId?: true
    conditionPayment?: true
    totalAmount?: true
    ivaAmount?: true
    paidAmount?: true
    observation?: true
    available?: true
    associatedVoucherNumber?: true
    associatedVoucherType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EVoucherCountAggregateInputType = {
    id?: true
    arcaCae?: true
    arcaDueDate?: true
    type?: true
    pointOfSale?: true
    voucherNumber?: true
    emissionDate?: true
    dueDate?: true
    status?: true
    contactId?: true
    conditionPayment?: true
    totalAmount?: true
    ivaAmount?: true
    paidAmount?: true
    observation?: true
    available?: true
    afipRequestData?: true
    afipResponseData?: true
    associatedVoucherNumber?: true
    associatedVoucherType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EVoucherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EVoucher to aggregate.
     */
    where?: EVoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVouchers to fetch.
     */
    orderBy?: EVoucherOrderByWithRelationInput | EVoucherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EVoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVouchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVouchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EVouchers
    **/
    _count?: true | EVoucherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EVoucherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EVoucherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EVoucherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EVoucherMaxAggregateInputType
  }

  export type GetEVoucherAggregateType<T extends EVoucherAggregateArgs> = {
        [P in keyof T & keyof AggregateEVoucher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEVoucher[P]>
      : GetScalarType<T[P], AggregateEVoucher[P]>
  }




  export type EVoucherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EVoucherWhereInput
    orderBy?: EVoucherOrderByWithAggregationInput | EVoucherOrderByWithAggregationInput[]
    by: EVoucherScalarFieldEnum[] | EVoucherScalarFieldEnum
    having?: EVoucherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EVoucherCountAggregateInputType | true
    _avg?: EVoucherAvgAggregateInputType
    _sum?: EVoucherSumAggregateInputType
    _min?: EVoucherMinAggregateInputType
    _max?: EVoucherMaxAggregateInputType
  }

  export type EVoucherGroupByOutputType = {
    id: string
    arcaCae: string | null
    arcaDueDate: string | null
    type: $Enums.VoucherType
    pointOfSale: number
    voucherNumber: number
    emissionDate: Date
    dueDate: Date | null
    status: $Enums.VoucherStatus
    contactId: string | null
    conditionPayment: $Enums.ConditionPayment | null
    totalAmount: number | null
    ivaAmount: number | null
    paidAmount: number
    observation: string | null
    available: boolean
    afipRequestData: JsonValue | null
    afipResponseData: JsonValue | null
    associatedVoucherNumber: number | null
    associatedVoucherType: $Enums.VoucherType | null
    createdAt: Date
    updatedAt: Date
    _count: EVoucherCountAggregateOutputType | null
    _avg: EVoucherAvgAggregateOutputType | null
    _sum: EVoucherSumAggregateOutputType | null
    _min: EVoucherMinAggregateOutputType | null
    _max: EVoucherMaxAggregateOutputType | null
  }

  type GetEVoucherGroupByPayload<T extends EVoucherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EVoucherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EVoucherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EVoucherGroupByOutputType[P]>
            : GetScalarType<T[P], EVoucherGroupByOutputType[P]>
        }
      >
    >


  export type EVoucherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arcaCae?: boolean
    arcaDueDate?: boolean
    type?: boolean
    pointOfSale?: boolean
    voucherNumber?: boolean
    emissionDate?: boolean
    dueDate?: boolean
    status?: boolean
    contactId?: boolean
    conditionPayment?: boolean
    totalAmount?: boolean
    ivaAmount?: boolean
    paidAmount?: boolean
    observation?: boolean
    available?: boolean
    afipRequestData?: boolean
    afipResponseData?: boolean
    associatedVoucherNumber?: boolean
    associatedVoucherType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    products?: boolean | EVoucher$productsArgs<ExtArgs>
    Payments?: boolean | EVoucher$PaymentsArgs<ExtArgs>
    _count?: boolean | EVoucherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eVoucher"]>

  export type EVoucherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arcaCae?: boolean
    arcaDueDate?: boolean
    type?: boolean
    pointOfSale?: boolean
    voucherNumber?: boolean
    emissionDate?: boolean
    dueDate?: boolean
    status?: boolean
    contactId?: boolean
    conditionPayment?: boolean
    totalAmount?: boolean
    ivaAmount?: boolean
    paidAmount?: boolean
    observation?: boolean
    available?: boolean
    afipRequestData?: boolean
    afipResponseData?: boolean
    associatedVoucherNumber?: boolean
    associatedVoucherType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["eVoucher"]>

  export type EVoucherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arcaCae?: boolean
    arcaDueDate?: boolean
    type?: boolean
    pointOfSale?: boolean
    voucherNumber?: boolean
    emissionDate?: boolean
    dueDate?: boolean
    status?: boolean
    contactId?: boolean
    conditionPayment?: boolean
    totalAmount?: boolean
    ivaAmount?: boolean
    paidAmount?: boolean
    observation?: boolean
    available?: boolean
    afipRequestData?: boolean
    afipResponseData?: boolean
    associatedVoucherNumber?: boolean
    associatedVoucherType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["eVoucher"]>

  export type EVoucherSelectScalar = {
    id?: boolean
    arcaCae?: boolean
    arcaDueDate?: boolean
    type?: boolean
    pointOfSale?: boolean
    voucherNumber?: boolean
    emissionDate?: boolean
    dueDate?: boolean
    status?: boolean
    contactId?: boolean
    conditionPayment?: boolean
    totalAmount?: boolean
    ivaAmount?: boolean
    paidAmount?: boolean
    observation?: boolean
    available?: boolean
    afipRequestData?: boolean
    afipResponseData?: boolean
    associatedVoucherNumber?: boolean
    associatedVoucherType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EVoucherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "arcaCae" | "arcaDueDate" | "type" | "pointOfSale" | "voucherNumber" | "emissionDate" | "dueDate" | "status" | "contactId" | "conditionPayment" | "totalAmount" | "ivaAmount" | "paidAmount" | "observation" | "available" | "afipRequestData" | "afipResponseData" | "associatedVoucherNumber" | "associatedVoucherType" | "createdAt" | "updatedAt", ExtArgs["result"]["eVoucher"]>
  export type EVoucherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | EVoucher$productsArgs<ExtArgs>
    Payments?: boolean | EVoucher$PaymentsArgs<ExtArgs>
    _count?: boolean | EVoucherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EVoucherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EVoucherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EVoucherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EVoucher"
    objects: {
      products: Prisma.$EVoucherProductPayload<ExtArgs>[]
      Payments: Prisma.$EPaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      arcaCae: string | null
      arcaDueDate: string | null
      type: $Enums.VoucherType
      pointOfSale: number
      voucherNumber: number
      emissionDate: Date
      dueDate: Date | null
      status: $Enums.VoucherStatus
      contactId: string | null
      conditionPayment: $Enums.ConditionPayment | null
      totalAmount: number | null
      ivaAmount: number | null
      paidAmount: number
      observation: string | null
      available: boolean
      afipRequestData: Prisma.JsonValue | null
      afipResponseData: Prisma.JsonValue | null
      associatedVoucherNumber: number | null
      associatedVoucherType: $Enums.VoucherType | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["eVoucher"]>
    composites: {}
  }

  type EVoucherGetPayload<S extends boolean | null | undefined | EVoucherDefaultArgs> = $Result.GetResult<Prisma.$EVoucherPayload, S>

  type EVoucherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EVoucherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EVoucherCountAggregateInputType | true
    }

  export interface EVoucherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EVoucher'], meta: { name: 'EVoucher' } }
    /**
     * Find zero or one EVoucher that matches the filter.
     * @param {EVoucherFindUniqueArgs} args - Arguments to find a EVoucher
     * @example
     * // Get one EVoucher
     * const eVoucher = await prisma.eVoucher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EVoucherFindUniqueArgs>(args: SelectSubset<T, EVoucherFindUniqueArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EVoucher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EVoucherFindUniqueOrThrowArgs} args - Arguments to find a EVoucher
     * @example
     * // Get one EVoucher
     * const eVoucher = await prisma.eVoucher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EVoucherFindUniqueOrThrowArgs>(args: SelectSubset<T, EVoucherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EVoucher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherFindFirstArgs} args - Arguments to find a EVoucher
     * @example
     * // Get one EVoucher
     * const eVoucher = await prisma.eVoucher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EVoucherFindFirstArgs>(args?: SelectSubset<T, EVoucherFindFirstArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EVoucher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherFindFirstOrThrowArgs} args - Arguments to find a EVoucher
     * @example
     * // Get one EVoucher
     * const eVoucher = await prisma.eVoucher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EVoucherFindFirstOrThrowArgs>(args?: SelectSubset<T, EVoucherFindFirstOrThrowArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EVouchers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EVouchers
     * const eVouchers = await prisma.eVoucher.findMany()
     * 
     * // Get first 10 EVouchers
     * const eVouchers = await prisma.eVoucher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eVoucherWithIdOnly = await prisma.eVoucher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EVoucherFindManyArgs>(args?: SelectSubset<T, EVoucherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EVoucher.
     * @param {EVoucherCreateArgs} args - Arguments to create a EVoucher.
     * @example
     * // Create one EVoucher
     * const EVoucher = await prisma.eVoucher.create({
     *   data: {
     *     // ... data to create a EVoucher
     *   }
     * })
     * 
     */
    create<T extends EVoucherCreateArgs>(args: SelectSubset<T, EVoucherCreateArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EVouchers.
     * @param {EVoucherCreateManyArgs} args - Arguments to create many EVouchers.
     * @example
     * // Create many EVouchers
     * const eVoucher = await prisma.eVoucher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EVoucherCreateManyArgs>(args?: SelectSubset<T, EVoucherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EVouchers and returns the data saved in the database.
     * @param {EVoucherCreateManyAndReturnArgs} args - Arguments to create many EVouchers.
     * @example
     * // Create many EVouchers
     * const eVoucher = await prisma.eVoucher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EVouchers and only return the `id`
     * const eVoucherWithIdOnly = await prisma.eVoucher.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EVoucherCreateManyAndReturnArgs>(args?: SelectSubset<T, EVoucherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EVoucher.
     * @param {EVoucherDeleteArgs} args - Arguments to delete one EVoucher.
     * @example
     * // Delete one EVoucher
     * const EVoucher = await prisma.eVoucher.delete({
     *   where: {
     *     // ... filter to delete one EVoucher
     *   }
     * })
     * 
     */
    delete<T extends EVoucherDeleteArgs>(args: SelectSubset<T, EVoucherDeleteArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EVoucher.
     * @param {EVoucherUpdateArgs} args - Arguments to update one EVoucher.
     * @example
     * // Update one EVoucher
     * const eVoucher = await prisma.eVoucher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EVoucherUpdateArgs>(args: SelectSubset<T, EVoucherUpdateArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EVouchers.
     * @param {EVoucherDeleteManyArgs} args - Arguments to filter EVouchers to delete.
     * @example
     * // Delete a few EVouchers
     * const { count } = await prisma.eVoucher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EVoucherDeleteManyArgs>(args?: SelectSubset<T, EVoucherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EVouchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EVouchers
     * const eVoucher = await prisma.eVoucher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EVoucherUpdateManyArgs>(args: SelectSubset<T, EVoucherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EVouchers and returns the data updated in the database.
     * @param {EVoucherUpdateManyAndReturnArgs} args - Arguments to update many EVouchers.
     * @example
     * // Update many EVouchers
     * const eVoucher = await prisma.eVoucher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EVouchers and only return the `id`
     * const eVoucherWithIdOnly = await prisma.eVoucher.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EVoucherUpdateManyAndReturnArgs>(args: SelectSubset<T, EVoucherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EVoucher.
     * @param {EVoucherUpsertArgs} args - Arguments to update or create a EVoucher.
     * @example
     * // Update or create a EVoucher
     * const eVoucher = await prisma.eVoucher.upsert({
     *   create: {
     *     // ... data to create a EVoucher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EVoucher we want to update
     *   }
     * })
     */
    upsert<T extends EVoucherUpsertArgs>(args: SelectSubset<T, EVoucherUpsertArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EVouchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherCountArgs} args - Arguments to filter EVouchers to count.
     * @example
     * // Count the number of EVouchers
     * const count = await prisma.eVoucher.count({
     *   where: {
     *     // ... the filter for the EVouchers we want to count
     *   }
     * })
    **/
    count<T extends EVoucherCountArgs>(
      args?: Subset<T, EVoucherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EVoucherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EVoucher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EVoucherAggregateArgs>(args: Subset<T, EVoucherAggregateArgs>): Prisma.PrismaPromise<GetEVoucherAggregateType<T>>

    /**
     * Group by EVoucher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EVoucherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EVoucherGroupByArgs['orderBy'] }
        : { orderBy?: EVoucherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EVoucherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEVoucherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EVoucher model
   */
  readonly fields: EVoucherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EVoucher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EVoucherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends EVoucher$productsArgs<ExtArgs> = {}>(args?: Subset<T, EVoucher$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Payments<T extends EVoucher$PaymentsArgs<ExtArgs> = {}>(args?: Subset<T, EVoucher$PaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EVoucher model
   */
  interface EVoucherFieldRefs {
    readonly id: FieldRef<"EVoucher", 'String'>
    readonly arcaCae: FieldRef<"EVoucher", 'String'>
    readonly arcaDueDate: FieldRef<"EVoucher", 'String'>
    readonly type: FieldRef<"EVoucher", 'VoucherType'>
    readonly pointOfSale: FieldRef<"EVoucher", 'Int'>
    readonly voucherNumber: FieldRef<"EVoucher", 'Int'>
    readonly emissionDate: FieldRef<"EVoucher", 'DateTime'>
    readonly dueDate: FieldRef<"EVoucher", 'DateTime'>
    readonly status: FieldRef<"EVoucher", 'VoucherStatus'>
    readonly contactId: FieldRef<"EVoucher", 'String'>
    readonly conditionPayment: FieldRef<"EVoucher", 'ConditionPayment'>
    readonly totalAmount: FieldRef<"EVoucher", 'Float'>
    readonly ivaAmount: FieldRef<"EVoucher", 'Float'>
    readonly paidAmount: FieldRef<"EVoucher", 'Float'>
    readonly observation: FieldRef<"EVoucher", 'String'>
    readonly available: FieldRef<"EVoucher", 'Boolean'>
    readonly afipRequestData: FieldRef<"EVoucher", 'Json'>
    readonly afipResponseData: FieldRef<"EVoucher", 'Json'>
    readonly associatedVoucherNumber: FieldRef<"EVoucher", 'Float'>
    readonly associatedVoucherType: FieldRef<"EVoucher", 'VoucherType'>
    readonly createdAt: FieldRef<"EVoucher", 'DateTime'>
    readonly updatedAt: FieldRef<"EVoucher", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EVoucher findUnique
   */
  export type EVoucherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
    /**
     * Filter, which EVoucher to fetch.
     */
    where: EVoucherWhereUniqueInput
  }

  /**
   * EVoucher findUniqueOrThrow
   */
  export type EVoucherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
    /**
     * Filter, which EVoucher to fetch.
     */
    where: EVoucherWhereUniqueInput
  }

  /**
   * EVoucher findFirst
   */
  export type EVoucherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
    /**
     * Filter, which EVoucher to fetch.
     */
    where?: EVoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVouchers to fetch.
     */
    orderBy?: EVoucherOrderByWithRelationInput | EVoucherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EVouchers.
     */
    cursor?: EVoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVouchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVouchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EVouchers.
     */
    distinct?: EVoucherScalarFieldEnum | EVoucherScalarFieldEnum[]
  }

  /**
   * EVoucher findFirstOrThrow
   */
  export type EVoucherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
    /**
     * Filter, which EVoucher to fetch.
     */
    where?: EVoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVouchers to fetch.
     */
    orderBy?: EVoucherOrderByWithRelationInput | EVoucherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EVouchers.
     */
    cursor?: EVoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVouchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVouchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EVouchers.
     */
    distinct?: EVoucherScalarFieldEnum | EVoucherScalarFieldEnum[]
  }

  /**
   * EVoucher findMany
   */
  export type EVoucherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
    /**
     * Filter, which EVouchers to fetch.
     */
    where?: EVoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVouchers to fetch.
     */
    orderBy?: EVoucherOrderByWithRelationInput | EVoucherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EVouchers.
     */
    cursor?: EVoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVouchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVouchers.
     */
    skip?: number
    distinct?: EVoucherScalarFieldEnum | EVoucherScalarFieldEnum[]
  }

  /**
   * EVoucher create
   */
  export type EVoucherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
    /**
     * The data needed to create a EVoucher.
     */
    data: XOR<EVoucherCreateInput, EVoucherUncheckedCreateInput>
  }

  /**
   * EVoucher createMany
   */
  export type EVoucherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EVouchers.
     */
    data: EVoucherCreateManyInput | EVoucherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EVoucher createManyAndReturn
   */
  export type EVoucherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * The data used to create many EVouchers.
     */
    data: EVoucherCreateManyInput | EVoucherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EVoucher update
   */
  export type EVoucherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
    /**
     * The data needed to update a EVoucher.
     */
    data: XOR<EVoucherUpdateInput, EVoucherUncheckedUpdateInput>
    /**
     * Choose, which EVoucher to update.
     */
    where: EVoucherWhereUniqueInput
  }

  /**
   * EVoucher updateMany
   */
  export type EVoucherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EVouchers.
     */
    data: XOR<EVoucherUpdateManyMutationInput, EVoucherUncheckedUpdateManyInput>
    /**
     * Filter which EVouchers to update
     */
    where?: EVoucherWhereInput
    /**
     * Limit how many EVouchers to update.
     */
    limit?: number
  }

  /**
   * EVoucher updateManyAndReturn
   */
  export type EVoucherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * The data used to update EVouchers.
     */
    data: XOR<EVoucherUpdateManyMutationInput, EVoucherUncheckedUpdateManyInput>
    /**
     * Filter which EVouchers to update
     */
    where?: EVoucherWhereInput
    /**
     * Limit how many EVouchers to update.
     */
    limit?: number
  }

  /**
   * EVoucher upsert
   */
  export type EVoucherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
    /**
     * The filter to search for the EVoucher to update in case it exists.
     */
    where: EVoucherWhereUniqueInput
    /**
     * In case the EVoucher found by the `where` argument doesn't exist, create a new EVoucher with this data.
     */
    create: XOR<EVoucherCreateInput, EVoucherUncheckedCreateInput>
    /**
     * In case the EVoucher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EVoucherUpdateInput, EVoucherUncheckedUpdateInput>
  }

  /**
   * EVoucher delete
   */
  export type EVoucherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
    /**
     * Filter which EVoucher to delete.
     */
    where: EVoucherWhereUniqueInput
  }

  /**
   * EVoucher deleteMany
   */
  export type EVoucherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EVouchers to delete
     */
    where?: EVoucherWhereInput
    /**
     * Limit how many EVouchers to delete.
     */
    limit?: number
  }

  /**
   * EVoucher.products
   */
  export type EVoucher$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    where?: EVoucherProductWhereInput
    orderBy?: EVoucherProductOrderByWithRelationInput | EVoucherProductOrderByWithRelationInput[]
    cursor?: EVoucherProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EVoucherProductScalarFieldEnum | EVoucherProductScalarFieldEnum[]
  }

  /**
   * EVoucher.Payments
   */
  export type EVoucher$PaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    where?: EPaymentWhereInput
    orderBy?: EPaymentOrderByWithRelationInput | EPaymentOrderByWithRelationInput[]
    cursor?: EPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EPaymentScalarFieldEnum | EPaymentScalarFieldEnum[]
  }

  /**
   * EVoucher without action
   */
  export type EVoucherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucher
     */
    select?: EVoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucher
     */
    omit?: EVoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherInclude<ExtArgs> | null
  }


  /**
   * Model EVoucherProduct
   */

  export type AggregateEVoucherProduct = {
    _count: EVoucherProductCountAggregateOutputType | null
    _avg: EVoucherProductAvgAggregateOutputType | null
    _sum: EVoucherProductSumAggregateOutputType | null
    _min: EVoucherProductMinAggregateOutputType | null
    _max: EVoucherProductMaxAggregateOutputType | null
  }

  export type EVoucherProductAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type EVoucherProductSumAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type EVoucherProductMinAggregateOutputType = {
    id: string | null
    code: string | null
    voucherId: string | null
    description: string | null
    productId: string | null
    quantity: number | null
    price: number | null
  }

  export type EVoucherProductMaxAggregateOutputType = {
    id: string | null
    code: string | null
    voucherId: string | null
    description: string | null
    productId: string | null
    quantity: number | null
    price: number | null
  }

  export type EVoucherProductCountAggregateOutputType = {
    id: number
    code: number
    voucherId: number
    description: number
    productId: number
    quantity: number
    price: number
    _all: number
  }


  export type EVoucherProductAvgAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type EVoucherProductSumAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type EVoucherProductMinAggregateInputType = {
    id?: true
    code?: true
    voucherId?: true
    description?: true
    productId?: true
    quantity?: true
    price?: true
  }

  export type EVoucherProductMaxAggregateInputType = {
    id?: true
    code?: true
    voucherId?: true
    description?: true
    productId?: true
    quantity?: true
    price?: true
  }

  export type EVoucherProductCountAggregateInputType = {
    id?: true
    code?: true
    voucherId?: true
    description?: true
    productId?: true
    quantity?: true
    price?: true
    _all?: true
  }

  export type EVoucherProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EVoucherProduct to aggregate.
     */
    where?: EVoucherProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVoucherProducts to fetch.
     */
    orderBy?: EVoucherProductOrderByWithRelationInput | EVoucherProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EVoucherProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVoucherProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVoucherProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EVoucherProducts
    **/
    _count?: true | EVoucherProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EVoucherProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EVoucherProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EVoucherProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EVoucherProductMaxAggregateInputType
  }

  export type GetEVoucherProductAggregateType<T extends EVoucherProductAggregateArgs> = {
        [P in keyof T & keyof AggregateEVoucherProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEVoucherProduct[P]>
      : GetScalarType<T[P], AggregateEVoucherProduct[P]>
  }




  export type EVoucherProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EVoucherProductWhereInput
    orderBy?: EVoucherProductOrderByWithAggregationInput | EVoucherProductOrderByWithAggregationInput[]
    by: EVoucherProductScalarFieldEnum[] | EVoucherProductScalarFieldEnum
    having?: EVoucherProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EVoucherProductCountAggregateInputType | true
    _avg?: EVoucherProductAvgAggregateInputType
    _sum?: EVoucherProductSumAggregateInputType
    _min?: EVoucherProductMinAggregateInputType
    _max?: EVoucherProductMaxAggregateInputType
  }

  export type EVoucherProductGroupByOutputType = {
    id: string
    code: string
    voucherId: string
    description: string
    productId: string
    quantity: number
    price: number
    _count: EVoucherProductCountAggregateOutputType | null
    _avg: EVoucherProductAvgAggregateOutputType | null
    _sum: EVoucherProductSumAggregateOutputType | null
    _min: EVoucherProductMinAggregateOutputType | null
    _max: EVoucherProductMaxAggregateOutputType | null
  }

  type GetEVoucherProductGroupByPayload<T extends EVoucherProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EVoucherProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EVoucherProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EVoucherProductGroupByOutputType[P]>
            : GetScalarType<T[P], EVoucherProductGroupByOutputType[P]>
        }
      >
    >


  export type EVoucherProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    voucherId?: boolean
    description?: boolean
    productId?: boolean
    quantity?: boolean
    price?: boolean
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eVoucherProduct"]>

  export type EVoucherProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    voucherId?: boolean
    description?: boolean
    productId?: boolean
    quantity?: boolean
    price?: boolean
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eVoucherProduct"]>

  export type EVoucherProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    voucherId?: boolean
    description?: boolean
    productId?: boolean
    quantity?: boolean
    price?: boolean
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eVoucherProduct"]>

  export type EVoucherProductSelectScalar = {
    id?: boolean
    code?: boolean
    voucherId?: boolean
    description?: boolean
    productId?: boolean
    quantity?: boolean
    price?: boolean
  }

  export type EVoucherProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "voucherId" | "description" | "productId" | "quantity" | "price", ExtArgs["result"]["eVoucherProduct"]>
  export type EVoucherProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
  }
  export type EVoucherProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
  }
  export type EVoucherProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
  }

  export type $EVoucherProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EVoucherProduct"
    objects: {
      voucher: Prisma.$EVoucherPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      voucherId: string
      description: string
      productId: string
      quantity: number
      price: number
    }, ExtArgs["result"]["eVoucherProduct"]>
    composites: {}
  }

  type EVoucherProductGetPayload<S extends boolean | null | undefined | EVoucherProductDefaultArgs> = $Result.GetResult<Prisma.$EVoucherProductPayload, S>

  type EVoucherProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EVoucherProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EVoucherProductCountAggregateInputType | true
    }

  export interface EVoucherProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EVoucherProduct'], meta: { name: 'EVoucherProduct' } }
    /**
     * Find zero or one EVoucherProduct that matches the filter.
     * @param {EVoucherProductFindUniqueArgs} args - Arguments to find a EVoucherProduct
     * @example
     * // Get one EVoucherProduct
     * const eVoucherProduct = await prisma.eVoucherProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EVoucherProductFindUniqueArgs>(args: SelectSubset<T, EVoucherProductFindUniqueArgs<ExtArgs>>): Prisma__EVoucherProductClient<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EVoucherProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EVoucherProductFindUniqueOrThrowArgs} args - Arguments to find a EVoucherProduct
     * @example
     * // Get one EVoucherProduct
     * const eVoucherProduct = await prisma.eVoucherProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EVoucherProductFindUniqueOrThrowArgs>(args: SelectSubset<T, EVoucherProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EVoucherProductClient<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EVoucherProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherProductFindFirstArgs} args - Arguments to find a EVoucherProduct
     * @example
     * // Get one EVoucherProduct
     * const eVoucherProduct = await prisma.eVoucherProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EVoucherProductFindFirstArgs>(args?: SelectSubset<T, EVoucherProductFindFirstArgs<ExtArgs>>): Prisma__EVoucherProductClient<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EVoucherProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherProductFindFirstOrThrowArgs} args - Arguments to find a EVoucherProduct
     * @example
     * // Get one EVoucherProduct
     * const eVoucherProduct = await prisma.eVoucherProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EVoucherProductFindFirstOrThrowArgs>(args?: SelectSubset<T, EVoucherProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__EVoucherProductClient<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EVoucherProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EVoucherProducts
     * const eVoucherProducts = await prisma.eVoucherProduct.findMany()
     * 
     * // Get first 10 EVoucherProducts
     * const eVoucherProducts = await prisma.eVoucherProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eVoucherProductWithIdOnly = await prisma.eVoucherProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EVoucherProductFindManyArgs>(args?: SelectSubset<T, EVoucherProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EVoucherProduct.
     * @param {EVoucherProductCreateArgs} args - Arguments to create a EVoucherProduct.
     * @example
     * // Create one EVoucherProduct
     * const EVoucherProduct = await prisma.eVoucherProduct.create({
     *   data: {
     *     // ... data to create a EVoucherProduct
     *   }
     * })
     * 
     */
    create<T extends EVoucherProductCreateArgs>(args: SelectSubset<T, EVoucherProductCreateArgs<ExtArgs>>): Prisma__EVoucherProductClient<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EVoucherProducts.
     * @param {EVoucherProductCreateManyArgs} args - Arguments to create many EVoucherProducts.
     * @example
     * // Create many EVoucherProducts
     * const eVoucherProduct = await prisma.eVoucherProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EVoucherProductCreateManyArgs>(args?: SelectSubset<T, EVoucherProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EVoucherProducts and returns the data saved in the database.
     * @param {EVoucherProductCreateManyAndReturnArgs} args - Arguments to create many EVoucherProducts.
     * @example
     * // Create many EVoucherProducts
     * const eVoucherProduct = await prisma.eVoucherProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EVoucherProducts and only return the `id`
     * const eVoucherProductWithIdOnly = await prisma.eVoucherProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EVoucherProductCreateManyAndReturnArgs>(args?: SelectSubset<T, EVoucherProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EVoucherProduct.
     * @param {EVoucherProductDeleteArgs} args - Arguments to delete one EVoucherProduct.
     * @example
     * // Delete one EVoucherProduct
     * const EVoucherProduct = await prisma.eVoucherProduct.delete({
     *   where: {
     *     // ... filter to delete one EVoucherProduct
     *   }
     * })
     * 
     */
    delete<T extends EVoucherProductDeleteArgs>(args: SelectSubset<T, EVoucherProductDeleteArgs<ExtArgs>>): Prisma__EVoucherProductClient<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EVoucherProduct.
     * @param {EVoucherProductUpdateArgs} args - Arguments to update one EVoucherProduct.
     * @example
     * // Update one EVoucherProduct
     * const eVoucherProduct = await prisma.eVoucherProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EVoucherProductUpdateArgs>(args: SelectSubset<T, EVoucherProductUpdateArgs<ExtArgs>>): Prisma__EVoucherProductClient<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EVoucherProducts.
     * @param {EVoucherProductDeleteManyArgs} args - Arguments to filter EVoucherProducts to delete.
     * @example
     * // Delete a few EVoucherProducts
     * const { count } = await prisma.eVoucherProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EVoucherProductDeleteManyArgs>(args?: SelectSubset<T, EVoucherProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EVoucherProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EVoucherProducts
     * const eVoucherProduct = await prisma.eVoucherProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EVoucherProductUpdateManyArgs>(args: SelectSubset<T, EVoucherProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EVoucherProducts and returns the data updated in the database.
     * @param {EVoucherProductUpdateManyAndReturnArgs} args - Arguments to update many EVoucherProducts.
     * @example
     * // Update many EVoucherProducts
     * const eVoucherProduct = await prisma.eVoucherProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EVoucherProducts and only return the `id`
     * const eVoucherProductWithIdOnly = await prisma.eVoucherProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EVoucherProductUpdateManyAndReturnArgs>(args: SelectSubset<T, EVoucherProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EVoucherProduct.
     * @param {EVoucherProductUpsertArgs} args - Arguments to update or create a EVoucherProduct.
     * @example
     * // Update or create a EVoucherProduct
     * const eVoucherProduct = await prisma.eVoucherProduct.upsert({
     *   create: {
     *     // ... data to create a EVoucherProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EVoucherProduct we want to update
     *   }
     * })
     */
    upsert<T extends EVoucherProductUpsertArgs>(args: SelectSubset<T, EVoucherProductUpsertArgs<ExtArgs>>): Prisma__EVoucherProductClient<$Result.GetResult<Prisma.$EVoucherProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EVoucherProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherProductCountArgs} args - Arguments to filter EVoucherProducts to count.
     * @example
     * // Count the number of EVoucherProducts
     * const count = await prisma.eVoucherProduct.count({
     *   where: {
     *     // ... the filter for the EVoucherProducts we want to count
     *   }
     * })
    **/
    count<T extends EVoucherProductCountArgs>(
      args?: Subset<T, EVoucherProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EVoucherProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EVoucherProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EVoucherProductAggregateArgs>(args: Subset<T, EVoucherProductAggregateArgs>): Prisma.PrismaPromise<GetEVoucherProductAggregateType<T>>

    /**
     * Group by EVoucherProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVoucherProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EVoucherProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EVoucherProductGroupByArgs['orderBy'] }
        : { orderBy?: EVoucherProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EVoucherProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEVoucherProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EVoucherProduct model
   */
  readonly fields: EVoucherProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EVoucherProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EVoucherProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    voucher<T extends EVoucherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EVoucherDefaultArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EVoucherProduct model
   */
  interface EVoucherProductFieldRefs {
    readonly id: FieldRef<"EVoucherProduct", 'String'>
    readonly code: FieldRef<"EVoucherProduct", 'String'>
    readonly voucherId: FieldRef<"EVoucherProduct", 'String'>
    readonly description: FieldRef<"EVoucherProduct", 'String'>
    readonly productId: FieldRef<"EVoucherProduct", 'String'>
    readonly quantity: FieldRef<"EVoucherProduct", 'Int'>
    readonly price: FieldRef<"EVoucherProduct", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * EVoucherProduct findUnique
   */
  export type EVoucherProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which EVoucherProduct to fetch.
     */
    where: EVoucherProductWhereUniqueInput
  }

  /**
   * EVoucherProduct findUniqueOrThrow
   */
  export type EVoucherProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which EVoucherProduct to fetch.
     */
    where: EVoucherProductWhereUniqueInput
  }

  /**
   * EVoucherProduct findFirst
   */
  export type EVoucherProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which EVoucherProduct to fetch.
     */
    where?: EVoucherProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVoucherProducts to fetch.
     */
    orderBy?: EVoucherProductOrderByWithRelationInput | EVoucherProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EVoucherProducts.
     */
    cursor?: EVoucherProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVoucherProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVoucherProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EVoucherProducts.
     */
    distinct?: EVoucherProductScalarFieldEnum | EVoucherProductScalarFieldEnum[]
  }

  /**
   * EVoucherProduct findFirstOrThrow
   */
  export type EVoucherProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which EVoucherProduct to fetch.
     */
    where?: EVoucherProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVoucherProducts to fetch.
     */
    orderBy?: EVoucherProductOrderByWithRelationInput | EVoucherProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EVoucherProducts.
     */
    cursor?: EVoucherProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVoucherProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVoucherProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EVoucherProducts.
     */
    distinct?: EVoucherProductScalarFieldEnum | EVoucherProductScalarFieldEnum[]
  }

  /**
   * EVoucherProduct findMany
   */
  export type EVoucherProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which EVoucherProducts to fetch.
     */
    where?: EVoucherProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVoucherProducts to fetch.
     */
    orderBy?: EVoucherProductOrderByWithRelationInput | EVoucherProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EVoucherProducts.
     */
    cursor?: EVoucherProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVoucherProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVoucherProducts.
     */
    skip?: number
    distinct?: EVoucherProductScalarFieldEnum | EVoucherProductScalarFieldEnum[]
  }

  /**
   * EVoucherProduct create
   */
  export type EVoucherProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    /**
     * The data needed to create a EVoucherProduct.
     */
    data: XOR<EVoucherProductCreateInput, EVoucherProductUncheckedCreateInput>
  }

  /**
   * EVoucherProduct createMany
   */
  export type EVoucherProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EVoucherProducts.
     */
    data: EVoucherProductCreateManyInput | EVoucherProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EVoucherProduct createManyAndReturn
   */
  export type EVoucherProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * The data used to create many EVoucherProducts.
     */
    data: EVoucherProductCreateManyInput | EVoucherProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EVoucherProduct update
   */
  export type EVoucherProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    /**
     * The data needed to update a EVoucherProduct.
     */
    data: XOR<EVoucherProductUpdateInput, EVoucherProductUncheckedUpdateInput>
    /**
     * Choose, which EVoucherProduct to update.
     */
    where: EVoucherProductWhereUniqueInput
  }

  /**
   * EVoucherProduct updateMany
   */
  export type EVoucherProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EVoucherProducts.
     */
    data: XOR<EVoucherProductUpdateManyMutationInput, EVoucherProductUncheckedUpdateManyInput>
    /**
     * Filter which EVoucherProducts to update
     */
    where?: EVoucherProductWhereInput
    /**
     * Limit how many EVoucherProducts to update.
     */
    limit?: number
  }

  /**
   * EVoucherProduct updateManyAndReturn
   */
  export type EVoucherProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * The data used to update EVoucherProducts.
     */
    data: XOR<EVoucherProductUpdateManyMutationInput, EVoucherProductUncheckedUpdateManyInput>
    /**
     * Filter which EVoucherProducts to update
     */
    where?: EVoucherProductWhereInput
    /**
     * Limit how many EVoucherProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EVoucherProduct upsert
   */
  export type EVoucherProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    /**
     * The filter to search for the EVoucherProduct to update in case it exists.
     */
    where: EVoucherProductWhereUniqueInput
    /**
     * In case the EVoucherProduct found by the `where` argument doesn't exist, create a new EVoucherProduct with this data.
     */
    create: XOR<EVoucherProductCreateInput, EVoucherProductUncheckedCreateInput>
    /**
     * In case the EVoucherProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EVoucherProductUpdateInput, EVoucherProductUncheckedUpdateInput>
  }

  /**
   * EVoucherProduct delete
   */
  export type EVoucherProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
    /**
     * Filter which EVoucherProduct to delete.
     */
    where: EVoucherProductWhereUniqueInput
  }

  /**
   * EVoucherProduct deleteMany
   */
  export type EVoucherProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EVoucherProducts to delete
     */
    where?: EVoucherProductWhereInput
    /**
     * Limit how many EVoucherProducts to delete.
     */
    limit?: number
  }

  /**
   * EVoucherProduct without action
   */
  export type EVoucherProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EVoucherProduct
     */
    select?: EVoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EVoucherProduct
     */
    omit?: EVoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVoucherProductInclude<ExtArgs> | null
  }


  /**
   * Model EBank
   */

  export type AggregateEBank = {
    _count: EBankCountAggregateOutputType | null
    _min: EBankMinAggregateOutputType | null
    _max: EBankMaxAggregateOutputType | null
  }

  export type EBankMinAggregateOutputType = {
    id: string | null
    name: string | null
    account: string | null
    cbu: string | null
    currency: $Enums.Currency | null
    createdAt: Date | null
    updatedAt: Date | null
    available: boolean | null
  }

  export type EBankMaxAggregateOutputType = {
    id: string | null
    name: string | null
    account: string | null
    cbu: string | null
    currency: $Enums.Currency | null
    createdAt: Date | null
    updatedAt: Date | null
    available: boolean | null
  }

  export type EBankCountAggregateOutputType = {
    id: number
    name: number
    account: number
    cbu: number
    currency: number
    createdAt: number
    updatedAt: number
    available: number
    _all: number
  }


  export type EBankMinAggregateInputType = {
    id?: true
    name?: true
    account?: true
    cbu?: true
    currency?: true
    createdAt?: true
    updatedAt?: true
    available?: true
  }

  export type EBankMaxAggregateInputType = {
    id?: true
    name?: true
    account?: true
    cbu?: true
    currency?: true
    createdAt?: true
    updatedAt?: true
    available?: true
  }

  export type EBankCountAggregateInputType = {
    id?: true
    name?: true
    account?: true
    cbu?: true
    currency?: true
    createdAt?: true
    updatedAt?: true
    available?: true
    _all?: true
  }

  export type EBankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EBank to aggregate.
     */
    where?: EBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBanks to fetch.
     */
    orderBy?: EBankOrderByWithRelationInput | EBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EBanks
    **/
    _count?: true | EBankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EBankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EBankMaxAggregateInputType
  }

  export type GetEBankAggregateType<T extends EBankAggregateArgs> = {
        [P in keyof T & keyof AggregateEBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEBank[P]>
      : GetScalarType<T[P], AggregateEBank[P]>
  }




  export type EBankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EBankWhereInput
    orderBy?: EBankOrderByWithAggregationInput | EBankOrderByWithAggregationInput[]
    by: EBankScalarFieldEnum[] | EBankScalarFieldEnum
    having?: EBankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EBankCountAggregateInputType | true
    _min?: EBankMinAggregateInputType
    _max?: EBankMaxAggregateInputType
  }

  export type EBankGroupByOutputType = {
    id: string
    name: string
    account: string | null
    cbu: string | null
    currency: $Enums.Currency
    createdAt: Date
    updatedAt: Date
    available: boolean
    _count: EBankCountAggregateOutputType | null
    _min: EBankMinAggregateOutputType | null
    _max: EBankMaxAggregateOutputType | null
  }

  type GetEBankGroupByPayload<T extends EBankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EBankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EBankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EBankGroupByOutputType[P]>
            : GetScalarType<T[P], EBankGroupByOutputType[P]>
        }
      >
    >


  export type EBankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    account?: boolean
    cbu?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    available?: boolean
    payments?: boolean | EBank$paymentsArgs<ExtArgs>
    _count?: boolean | EBankCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eBank"]>

  export type EBankSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    account?: boolean
    cbu?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    available?: boolean
  }, ExtArgs["result"]["eBank"]>

  export type EBankSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    account?: boolean
    cbu?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    available?: boolean
  }, ExtArgs["result"]["eBank"]>

  export type EBankSelectScalar = {
    id?: boolean
    name?: boolean
    account?: boolean
    cbu?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    available?: boolean
  }

  export type EBankOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "account" | "cbu" | "currency" | "createdAt" | "updatedAt" | "available", ExtArgs["result"]["eBank"]>
  export type EBankInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | EBank$paymentsArgs<ExtArgs>
    _count?: boolean | EBankCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EBankIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EBankIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EBankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EBank"
    objects: {
      payments: Prisma.$EPaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      account: string | null
      cbu: string | null
      currency: $Enums.Currency
      createdAt: Date
      updatedAt: Date
      available: boolean
    }, ExtArgs["result"]["eBank"]>
    composites: {}
  }

  type EBankGetPayload<S extends boolean | null | undefined | EBankDefaultArgs> = $Result.GetResult<Prisma.$EBankPayload, S>

  type EBankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EBankFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EBankCountAggregateInputType | true
    }

  export interface EBankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EBank'], meta: { name: 'EBank' } }
    /**
     * Find zero or one EBank that matches the filter.
     * @param {EBankFindUniqueArgs} args - Arguments to find a EBank
     * @example
     * // Get one EBank
     * const eBank = await prisma.eBank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EBankFindUniqueArgs>(args: SelectSubset<T, EBankFindUniqueArgs<ExtArgs>>): Prisma__EBankClient<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EBank that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EBankFindUniqueOrThrowArgs} args - Arguments to find a EBank
     * @example
     * // Get one EBank
     * const eBank = await prisma.eBank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EBankFindUniqueOrThrowArgs>(args: SelectSubset<T, EBankFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EBankClient<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EBank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBankFindFirstArgs} args - Arguments to find a EBank
     * @example
     * // Get one EBank
     * const eBank = await prisma.eBank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EBankFindFirstArgs>(args?: SelectSubset<T, EBankFindFirstArgs<ExtArgs>>): Prisma__EBankClient<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EBank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBankFindFirstOrThrowArgs} args - Arguments to find a EBank
     * @example
     * // Get one EBank
     * const eBank = await prisma.eBank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EBankFindFirstOrThrowArgs>(args?: SelectSubset<T, EBankFindFirstOrThrowArgs<ExtArgs>>): Prisma__EBankClient<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EBanks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBankFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EBanks
     * const eBanks = await prisma.eBank.findMany()
     * 
     * // Get first 10 EBanks
     * const eBanks = await prisma.eBank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eBankWithIdOnly = await prisma.eBank.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EBankFindManyArgs>(args?: SelectSubset<T, EBankFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EBank.
     * @param {EBankCreateArgs} args - Arguments to create a EBank.
     * @example
     * // Create one EBank
     * const EBank = await prisma.eBank.create({
     *   data: {
     *     // ... data to create a EBank
     *   }
     * })
     * 
     */
    create<T extends EBankCreateArgs>(args: SelectSubset<T, EBankCreateArgs<ExtArgs>>): Prisma__EBankClient<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EBanks.
     * @param {EBankCreateManyArgs} args - Arguments to create many EBanks.
     * @example
     * // Create many EBanks
     * const eBank = await prisma.eBank.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EBankCreateManyArgs>(args?: SelectSubset<T, EBankCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EBanks and returns the data saved in the database.
     * @param {EBankCreateManyAndReturnArgs} args - Arguments to create many EBanks.
     * @example
     * // Create many EBanks
     * const eBank = await prisma.eBank.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EBanks and only return the `id`
     * const eBankWithIdOnly = await prisma.eBank.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EBankCreateManyAndReturnArgs>(args?: SelectSubset<T, EBankCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EBank.
     * @param {EBankDeleteArgs} args - Arguments to delete one EBank.
     * @example
     * // Delete one EBank
     * const EBank = await prisma.eBank.delete({
     *   where: {
     *     // ... filter to delete one EBank
     *   }
     * })
     * 
     */
    delete<T extends EBankDeleteArgs>(args: SelectSubset<T, EBankDeleteArgs<ExtArgs>>): Prisma__EBankClient<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EBank.
     * @param {EBankUpdateArgs} args - Arguments to update one EBank.
     * @example
     * // Update one EBank
     * const eBank = await prisma.eBank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EBankUpdateArgs>(args: SelectSubset<T, EBankUpdateArgs<ExtArgs>>): Prisma__EBankClient<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EBanks.
     * @param {EBankDeleteManyArgs} args - Arguments to filter EBanks to delete.
     * @example
     * // Delete a few EBanks
     * const { count } = await prisma.eBank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EBankDeleteManyArgs>(args?: SelectSubset<T, EBankDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EBanks
     * const eBank = await prisma.eBank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EBankUpdateManyArgs>(args: SelectSubset<T, EBankUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EBanks and returns the data updated in the database.
     * @param {EBankUpdateManyAndReturnArgs} args - Arguments to update many EBanks.
     * @example
     * // Update many EBanks
     * const eBank = await prisma.eBank.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EBanks and only return the `id`
     * const eBankWithIdOnly = await prisma.eBank.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EBankUpdateManyAndReturnArgs>(args: SelectSubset<T, EBankUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EBank.
     * @param {EBankUpsertArgs} args - Arguments to update or create a EBank.
     * @example
     * // Update or create a EBank
     * const eBank = await prisma.eBank.upsert({
     *   create: {
     *     // ... data to create a EBank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EBank we want to update
     *   }
     * })
     */
    upsert<T extends EBankUpsertArgs>(args: SelectSubset<T, EBankUpsertArgs<ExtArgs>>): Prisma__EBankClient<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBankCountArgs} args - Arguments to filter EBanks to count.
     * @example
     * // Count the number of EBanks
     * const count = await prisma.eBank.count({
     *   where: {
     *     // ... the filter for the EBanks we want to count
     *   }
     * })
    **/
    count<T extends EBankCountArgs>(
      args?: Subset<T, EBankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EBankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EBankAggregateArgs>(args: Subset<T, EBankAggregateArgs>): Prisma.PrismaPromise<GetEBankAggregateType<T>>

    /**
     * Group by EBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EBankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EBankGroupByArgs['orderBy'] }
        : { orderBy?: EBankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EBankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEBankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EBank model
   */
  readonly fields: EBankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EBank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EBankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payments<T extends EBank$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, EBank$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EBank model
   */
  interface EBankFieldRefs {
    readonly id: FieldRef<"EBank", 'String'>
    readonly name: FieldRef<"EBank", 'String'>
    readonly account: FieldRef<"EBank", 'String'>
    readonly cbu: FieldRef<"EBank", 'String'>
    readonly currency: FieldRef<"EBank", 'Currency'>
    readonly createdAt: FieldRef<"EBank", 'DateTime'>
    readonly updatedAt: FieldRef<"EBank", 'DateTime'>
    readonly available: FieldRef<"EBank", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * EBank findUnique
   */
  export type EBankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    /**
     * Filter, which EBank to fetch.
     */
    where: EBankWhereUniqueInput
  }

  /**
   * EBank findUniqueOrThrow
   */
  export type EBankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    /**
     * Filter, which EBank to fetch.
     */
    where: EBankWhereUniqueInput
  }

  /**
   * EBank findFirst
   */
  export type EBankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    /**
     * Filter, which EBank to fetch.
     */
    where?: EBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBanks to fetch.
     */
    orderBy?: EBankOrderByWithRelationInput | EBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EBanks.
     */
    cursor?: EBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EBanks.
     */
    distinct?: EBankScalarFieldEnum | EBankScalarFieldEnum[]
  }

  /**
   * EBank findFirstOrThrow
   */
  export type EBankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    /**
     * Filter, which EBank to fetch.
     */
    where?: EBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBanks to fetch.
     */
    orderBy?: EBankOrderByWithRelationInput | EBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EBanks.
     */
    cursor?: EBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EBanks.
     */
    distinct?: EBankScalarFieldEnum | EBankScalarFieldEnum[]
  }

  /**
   * EBank findMany
   */
  export type EBankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    /**
     * Filter, which EBanks to fetch.
     */
    where?: EBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBanks to fetch.
     */
    orderBy?: EBankOrderByWithRelationInput | EBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EBanks.
     */
    cursor?: EBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBanks.
     */
    skip?: number
    distinct?: EBankScalarFieldEnum | EBankScalarFieldEnum[]
  }

  /**
   * EBank create
   */
  export type EBankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    /**
     * The data needed to create a EBank.
     */
    data: XOR<EBankCreateInput, EBankUncheckedCreateInput>
  }

  /**
   * EBank createMany
   */
  export type EBankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EBanks.
     */
    data: EBankCreateManyInput | EBankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EBank createManyAndReturn
   */
  export type EBankCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * The data used to create many EBanks.
     */
    data: EBankCreateManyInput | EBankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EBank update
   */
  export type EBankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    /**
     * The data needed to update a EBank.
     */
    data: XOR<EBankUpdateInput, EBankUncheckedUpdateInput>
    /**
     * Choose, which EBank to update.
     */
    where: EBankWhereUniqueInput
  }

  /**
   * EBank updateMany
   */
  export type EBankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EBanks.
     */
    data: XOR<EBankUpdateManyMutationInput, EBankUncheckedUpdateManyInput>
    /**
     * Filter which EBanks to update
     */
    where?: EBankWhereInput
    /**
     * Limit how many EBanks to update.
     */
    limit?: number
  }

  /**
   * EBank updateManyAndReturn
   */
  export type EBankUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * The data used to update EBanks.
     */
    data: XOR<EBankUpdateManyMutationInput, EBankUncheckedUpdateManyInput>
    /**
     * Filter which EBanks to update
     */
    where?: EBankWhereInput
    /**
     * Limit how many EBanks to update.
     */
    limit?: number
  }

  /**
   * EBank upsert
   */
  export type EBankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    /**
     * The filter to search for the EBank to update in case it exists.
     */
    where: EBankWhereUniqueInput
    /**
     * In case the EBank found by the `where` argument doesn't exist, create a new EBank with this data.
     */
    create: XOR<EBankCreateInput, EBankUncheckedCreateInput>
    /**
     * In case the EBank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EBankUpdateInput, EBankUncheckedUpdateInput>
  }

  /**
   * EBank delete
   */
  export type EBankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    /**
     * Filter which EBank to delete.
     */
    where: EBankWhereUniqueInput
  }

  /**
   * EBank deleteMany
   */
  export type EBankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EBanks to delete
     */
    where?: EBankWhereInput
    /**
     * Limit how many EBanks to delete.
     */
    limit?: number
  }

  /**
   * EBank.payments
   */
  export type EBank$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    where?: EPaymentWhereInput
    orderBy?: EPaymentOrderByWithRelationInput | EPaymentOrderByWithRelationInput[]
    cursor?: EPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EPaymentScalarFieldEnum | EPaymentScalarFieldEnum[]
  }

  /**
   * EBank without action
   */
  export type EBankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
  }


  /**
   * Model ECard
   */

  export type AggregateECard = {
    _count: ECardCountAggregateOutputType | null
    _avg: ECardAvgAggregateOutputType | null
    _sum: ECardSumAggregateOutputType | null
    _min: ECardMinAggregateOutputType | null
    _max: ECardMaxAggregateOutputType | null
  }

  export type ECardAvgAggregateOutputType = {
    commissionPercentage: number | null
  }

  export type ECardSumAggregateOutputType = {
    commissionPercentage: number | null
  }

  export type ECardMinAggregateOutputType = {
    id: string | null
    available: boolean | null
    commissionPercentage: number | null
  }

  export type ECardMaxAggregateOutputType = {
    id: string | null
    available: boolean | null
    commissionPercentage: number | null
  }

  export type ECardCountAggregateOutputType = {
    id: number
    available: number
    commissionPercentage: number
    _all: number
  }


  export type ECardAvgAggregateInputType = {
    commissionPercentage?: true
  }

  export type ECardSumAggregateInputType = {
    commissionPercentage?: true
  }

  export type ECardMinAggregateInputType = {
    id?: true
    available?: true
    commissionPercentage?: true
  }

  export type ECardMaxAggregateInputType = {
    id?: true
    available?: true
    commissionPercentage?: true
  }

  export type ECardCountAggregateInputType = {
    id?: true
    available?: true
    commissionPercentage?: true
    _all?: true
  }

  export type ECardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ECard to aggregate.
     */
    where?: ECardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ECards to fetch.
     */
    orderBy?: ECardOrderByWithRelationInput | ECardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ECardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ECards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ECards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ECards
    **/
    _count?: true | ECardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ECardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ECardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ECardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ECardMaxAggregateInputType
  }

  export type GetECardAggregateType<T extends ECardAggregateArgs> = {
        [P in keyof T & keyof AggregateECard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateECard[P]>
      : GetScalarType<T[P], AggregateECard[P]>
  }




  export type ECardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ECardWhereInput
    orderBy?: ECardOrderByWithAggregationInput | ECardOrderByWithAggregationInput[]
    by: ECardScalarFieldEnum[] | ECardScalarFieldEnum
    having?: ECardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ECardCountAggregateInputType | true
    _avg?: ECardAvgAggregateInputType
    _sum?: ECardSumAggregateInputType
    _min?: ECardMinAggregateInputType
    _max?: ECardMaxAggregateInputType
  }

  export type ECardGroupByOutputType = {
    id: string
    available: boolean
    commissionPercentage: number | null
    _count: ECardCountAggregateOutputType | null
    _avg: ECardAvgAggregateOutputType | null
    _sum: ECardSumAggregateOutputType | null
    _min: ECardMinAggregateOutputType | null
    _max: ECardMaxAggregateOutputType | null
  }

  type GetECardGroupByPayload<T extends ECardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ECardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ECardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ECardGroupByOutputType[P]>
            : GetScalarType<T[P], ECardGroupByOutputType[P]>
        }
      >
    >


  export type ECardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    available?: boolean
    commissionPercentage?: boolean
    payments?: boolean | ECard$paymentsArgs<ExtArgs>
    _count?: boolean | ECardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eCard"]>

  export type ECardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    available?: boolean
    commissionPercentage?: boolean
  }, ExtArgs["result"]["eCard"]>

  export type ECardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    available?: boolean
    commissionPercentage?: boolean
  }, ExtArgs["result"]["eCard"]>

  export type ECardSelectScalar = {
    id?: boolean
    available?: boolean
    commissionPercentage?: boolean
  }

  export type ECardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "available" | "commissionPercentage", ExtArgs["result"]["eCard"]>
  export type ECardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | ECard$paymentsArgs<ExtArgs>
    _count?: boolean | ECardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ECardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ECardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ECardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ECard"
    objects: {
      payments: Prisma.$EPaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      available: boolean
      commissionPercentage: number | null
    }, ExtArgs["result"]["eCard"]>
    composites: {}
  }

  type ECardGetPayload<S extends boolean | null | undefined | ECardDefaultArgs> = $Result.GetResult<Prisma.$ECardPayload, S>

  type ECardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ECardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ECardCountAggregateInputType | true
    }

  export interface ECardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ECard'], meta: { name: 'ECard' } }
    /**
     * Find zero or one ECard that matches the filter.
     * @param {ECardFindUniqueArgs} args - Arguments to find a ECard
     * @example
     * // Get one ECard
     * const eCard = await prisma.eCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ECardFindUniqueArgs>(args: SelectSubset<T, ECardFindUniqueArgs<ExtArgs>>): Prisma__ECardClient<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ECard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ECardFindUniqueOrThrowArgs} args - Arguments to find a ECard
     * @example
     * // Get one ECard
     * const eCard = await prisma.eCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ECardFindUniqueOrThrowArgs>(args: SelectSubset<T, ECardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ECardClient<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ECard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ECardFindFirstArgs} args - Arguments to find a ECard
     * @example
     * // Get one ECard
     * const eCard = await prisma.eCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ECardFindFirstArgs>(args?: SelectSubset<T, ECardFindFirstArgs<ExtArgs>>): Prisma__ECardClient<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ECard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ECardFindFirstOrThrowArgs} args - Arguments to find a ECard
     * @example
     * // Get one ECard
     * const eCard = await prisma.eCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ECardFindFirstOrThrowArgs>(args?: SelectSubset<T, ECardFindFirstOrThrowArgs<ExtArgs>>): Prisma__ECardClient<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ECards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ECardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ECards
     * const eCards = await prisma.eCard.findMany()
     * 
     * // Get first 10 ECards
     * const eCards = await prisma.eCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eCardWithIdOnly = await prisma.eCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ECardFindManyArgs>(args?: SelectSubset<T, ECardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ECard.
     * @param {ECardCreateArgs} args - Arguments to create a ECard.
     * @example
     * // Create one ECard
     * const ECard = await prisma.eCard.create({
     *   data: {
     *     // ... data to create a ECard
     *   }
     * })
     * 
     */
    create<T extends ECardCreateArgs>(args: SelectSubset<T, ECardCreateArgs<ExtArgs>>): Prisma__ECardClient<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ECards.
     * @param {ECardCreateManyArgs} args - Arguments to create many ECards.
     * @example
     * // Create many ECards
     * const eCard = await prisma.eCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ECardCreateManyArgs>(args?: SelectSubset<T, ECardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ECards and returns the data saved in the database.
     * @param {ECardCreateManyAndReturnArgs} args - Arguments to create many ECards.
     * @example
     * // Create many ECards
     * const eCard = await prisma.eCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ECards and only return the `id`
     * const eCardWithIdOnly = await prisma.eCard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ECardCreateManyAndReturnArgs>(args?: SelectSubset<T, ECardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ECard.
     * @param {ECardDeleteArgs} args - Arguments to delete one ECard.
     * @example
     * // Delete one ECard
     * const ECard = await prisma.eCard.delete({
     *   where: {
     *     // ... filter to delete one ECard
     *   }
     * })
     * 
     */
    delete<T extends ECardDeleteArgs>(args: SelectSubset<T, ECardDeleteArgs<ExtArgs>>): Prisma__ECardClient<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ECard.
     * @param {ECardUpdateArgs} args - Arguments to update one ECard.
     * @example
     * // Update one ECard
     * const eCard = await prisma.eCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ECardUpdateArgs>(args: SelectSubset<T, ECardUpdateArgs<ExtArgs>>): Prisma__ECardClient<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ECards.
     * @param {ECardDeleteManyArgs} args - Arguments to filter ECards to delete.
     * @example
     * // Delete a few ECards
     * const { count } = await prisma.eCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ECardDeleteManyArgs>(args?: SelectSubset<T, ECardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ECards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ECardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ECards
     * const eCard = await prisma.eCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ECardUpdateManyArgs>(args: SelectSubset<T, ECardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ECards and returns the data updated in the database.
     * @param {ECardUpdateManyAndReturnArgs} args - Arguments to update many ECards.
     * @example
     * // Update many ECards
     * const eCard = await prisma.eCard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ECards and only return the `id`
     * const eCardWithIdOnly = await prisma.eCard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ECardUpdateManyAndReturnArgs>(args: SelectSubset<T, ECardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ECard.
     * @param {ECardUpsertArgs} args - Arguments to update or create a ECard.
     * @example
     * // Update or create a ECard
     * const eCard = await prisma.eCard.upsert({
     *   create: {
     *     // ... data to create a ECard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ECard we want to update
     *   }
     * })
     */
    upsert<T extends ECardUpsertArgs>(args: SelectSubset<T, ECardUpsertArgs<ExtArgs>>): Prisma__ECardClient<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ECards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ECardCountArgs} args - Arguments to filter ECards to count.
     * @example
     * // Count the number of ECards
     * const count = await prisma.eCard.count({
     *   where: {
     *     // ... the filter for the ECards we want to count
     *   }
     * })
    **/
    count<T extends ECardCountArgs>(
      args?: Subset<T, ECardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ECardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ECard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ECardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ECardAggregateArgs>(args: Subset<T, ECardAggregateArgs>): Prisma.PrismaPromise<GetECardAggregateType<T>>

    /**
     * Group by ECard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ECardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ECardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ECardGroupByArgs['orderBy'] }
        : { orderBy?: ECardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ECardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetECardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ECard model
   */
  readonly fields: ECardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ECard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ECardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payments<T extends ECard$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, ECard$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ECard model
   */
  interface ECardFieldRefs {
    readonly id: FieldRef<"ECard", 'String'>
    readonly available: FieldRef<"ECard", 'Boolean'>
    readonly commissionPercentage: FieldRef<"ECard", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ECard findUnique
   */
  export type ECardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    /**
     * Filter, which ECard to fetch.
     */
    where: ECardWhereUniqueInput
  }

  /**
   * ECard findUniqueOrThrow
   */
  export type ECardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    /**
     * Filter, which ECard to fetch.
     */
    where: ECardWhereUniqueInput
  }

  /**
   * ECard findFirst
   */
  export type ECardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    /**
     * Filter, which ECard to fetch.
     */
    where?: ECardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ECards to fetch.
     */
    orderBy?: ECardOrderByWithRelationInput | ECardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ECards.
     */
    cursor?: ECardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ECards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ECards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ECards.
     */
    distinct?: ECardScalarFieldEnum | ECardScalarFieldEnum[]
  }

  /**
   * ECard findFirstOrThrow
   */
  export type ECardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    /**
     * Filter, which ECard to fetch.
     */
    where?: ECardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ECards to fetch.
     */
    orderBy?: ECardOrderByWithRelationInput | ECardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ECards.
     */
    cursor?: ECardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ECards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ECards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ECards.
     */
    distinct?: ECardScalarFieldEnum | ECardScalarFieldEnum[]
  }

  /**
   * ECard findMany
   */
  export type ECardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    /**
     * Filter, which ECards to fetch.
     */
    where?: ECardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ECards to fetch.
     */
    orderBy?: ECardOrderByWithRelationInput | ECardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ECards.
     */
    cursor?: ECardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ECards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ECards.
     */
    skip?: number
    distinct?: ECardScalarFieldEnum | ECardScalarFieldEnum[]
  }

  /**
   * ECard create
   */
  export type ECardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    /**
     * The data needed to create a ECard.
     */
    data?: XOR<ECardCreateInput, ECardUncheckedCreateInput>
  }

  /**
   * ECard createMany
   */
  export type ECardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ECards.
     */
    data: ECardCreateManyInput | ECardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ECard createManyAndReturn
   */
  export type ECardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * The data used to create many ECards.
     */
    data: ECardCreateManyInput | ECardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ECard update
   */
  export type ECardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    /**
     * The data needed to update a ECard.
     */
    data: XOR<ECardUpdateInput, ECardUncheckedUpdateInput>
    /**
     * Choose, which ECard to update.
     */
    where: ECardWhereUniqueInput
  }

  /**
   * ECard updateMany
   */
  export type ECardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ECards.
     */
    data: XOR<ECardUpdateManyMutationInput, ECardUncheckedUpdateManyInput>
    /**
     * Filter which ECards to update
     */
    where?: ECardWhereInput
    /**
     * Limit how many ECards to update.
     */
    limit?: number
  }

  /**
   * ECard updateManyAndReturn
   */
  export type ECardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * The data used to update ECards.
     */
    data: XOR<ECardUpdateManyMutationInput, ECardUncheckedUpdateManyInput>
    /**
     * Filter which ECards to update
     */
    where?: ECardWhereInput
    /**
     * Limit how many ECards to update.
     */
    limit?: number
  }

  /**
   * ECard upsert
   */
  export type ECardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    /**
     * The filter to search for the ECard to update in case it exists.
     */
    where: ECardWhereUniqueInput
    /**
     * In case the ECard found by the `where` argument doesn't exist, create a new ECard with this data.
     */
    create: XOR<ECardCreateInput, ECardUncheckedCreateInput>
    /**
     * In case the ECard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ECardUpdateInput, ECardUncheckedUpdateInput>
  }

  /**
   * ECard delete
   */
  export type ECardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    /**
     * Filter which ECard to delete.
     */
    where: ECardWhereUniqueInput
  }

  /**
   * ECard deleteMany
   */
  export type ECardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ECards to delete
     */
    where?: ECardWhereInput
    /**
     * Limit how many ECards to delete.
     */
    limit?: number
  }

  /**
   * ECard.payments
   */
  export type ECard$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    where?: EPaymentWhereInput
    orderBy?: EPaymentOrderByWithRelationInput | EPaymentOrderByWithRelationInput[]
    cursor?: EPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EPaymentScalarFieldEnum | EPaymentScalarFieldEnum[]
  }

  /**
   * ECard without action
   */
  export type ECardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
  }


  /**
   * Model EPayment
   */

  export type AggregateEPayment = {
    _count: EPaymentCountAggregateOutputType | null
    _avg: EPaymentAvgAggregateOutputType | null
    _sum: EPaymentSumAggregateOutputType | null
    _min: EPaymentMinAggregateOutputType | null
    _max: EPaymentMaxAggregateOutputType | null
  }

  export type EPaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type EPaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type EPaymentMinAggregateOutputType = {
    id: string | null
    voucherId: string | null
    method: $Enums.PaymentMethod | null
    amount: number | null
    currency: $Enums.Currency | null
    receivedAt: Date | null
    bankId: string | null
    cardId: string | null
    available: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EPaymentMaxAggregateOutputType = {
    id: string | null
    voucherId: string | null
    method: $Enums.PaymentMethod | null
    amount: number | null
    currency: $Enums.Currency | null
    receivedAt: Date | null
    bankId: string | null
    cardId: string | null
    available: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EPaymentCountAggregateOutputType = {
    id: number
    voucherId: number
    method: number
    amount: number
    currency: number
    receivedAt: number
    bankId: number
    cardId: number
    available: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EPaymentAvgAggregateInputType = {
    amount?: true
  }

  export type EPaymentSumAggregateInputType = {
    amount?: true
  }

  export type EPaymentMinAggregateInputType = {
    id?: true
    voucherId?: true
    method?: true
    amount?: true
    currency?: true
    receivedAt?: true
    bankId?: true
    cardId?: true
    available?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EPaymentMaxAggregateInputType = {
    id?: true
    voucherId?: true
    method?: true
    amount?: true
    currency?: true
    receivedAt?: true
    bankId?: true
    cardId?: true
    available?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EPaymentCountAggregateInputType = {
    id?: true
    voucherId?: true
    method?: true
    amount?: true
    currency?: true
    receivedAt?: true
    bankId?: true
    cardId?: true
    available?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EPayment to aggregate.
     */
    where?: EPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EPayments to fetch.
     */
    orderBy?: EPaymentOrderByWithRelationInput | EPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EPayments
    **/
    _count?: true | EPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EPaymentMaxAggregateInputType
  }

  export type GetEPaymentAggregateType<T extends EPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateEPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEPayment[P]>
      : GetScalarType<T[P], AggregateEPayment[P]>
  }




  export type EPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EPaymentWhereInput
    orderBy?: EPaymentOrderByWithAggregationInput | EPaymentOrderByWithAggregationInput[]
    by: EPaymentScalarFieldEnum[] | EPaymentScalarFieldEnum
    having?: EPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EPaymentCountAggregateInputType | true
    _avg?: EPaymentAvgAggregateInputType
    _sum?: EPaymentSumAggregateInputType
    _min?: EPaymentMinAggregateInputType
    _max?: EPaymentMaxAggregateInputType
  }

  export type EPaymentGroupByOutputType = {
    id: string
    voucherId: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt: Date
    bankId: string | null
    cardId: string | null
    available: boolean
    createdAt: Date
    updatedAt: Date
    _count: EPaymentCountAggregateOutputType | null
    _avg: EPaymentAvgAggregateOutputType | null
    _sum: EPaymentSumAggregateOutputType | null
    _min: EPaymentMinAggregateOutputType | null
    _max: EPaymentMaxAggregateOutputType | null
  }

  type GetEPaymentGroupByPayload<T extends EPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], EPaymentGroupByOutputType[P]>
        }
      >
    >


  export type EPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    voucherId?: boolean
    method?: boolean
    amount?: boolean
    currency?: boolean
    receivedAt?: boolean
    bankId?: boolean
    cardId?: boolean
    available?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
    bank?: boolean | EPayment$bankArgs<ExtArgs>
    card?: boolean | EPayment$cardArgs<ExtArgs>
  }, ExtArgs["result"]["ePayment"]>

  export type EPaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    voucherId?: boolean
    method?: boolean
    amount?: boolean
    currency?: boolean
    receivedAt?: boolean
    bankId?: boolean
    cardId?: boolean
    available?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
    bank?: boolean | EPayment$bankArgs<ExtArgs>
    card?: boolean | EPayment$cardArgs<ExtArgs>
  }, ExtArgs["result"]["ePayment"]>

  export type EPaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    voucherId?: boolean
    method?: boolean
    amount?: boolean
    currency?: boolean
    receivedAt?: boolean
    bankId?: boolean
    cardId?: boolean
    available?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
    bank?: boolean | EPayment$bankArgs<ExtArgs>
    card?: boolean | EPayment$cardArgs<ExtArgs>
  }, ExtArgs["result"]["ePayment"]>

  export type EPaymentSelectScalar = {
    id?: boolean
    voucherId?: boolean
    method?: boolean
    amount?: boolean
    currency?: boolean
    receivedAt?: boolean
    bankId?: boolean
    cardId?: boolean
    available?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "voucherId" | "method" | "amount" | "currency" | "receivedAt" | "bankId" | "cardId" | "available" | "createdAt" | "updatedAt", ExtArgs["result"]["ePayment"]>
  export type EPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
    bank?: boolean | EPayment$bankArgs<ExtArgs>
    card?: boolean | EPayment$cardArgs<ExtArgs>
  }
  export type EPaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
    bank?: boolean | EPayment$bankArgs<ExtArgs>
    card?: boolean | EPayment$cardArgs<ExtArgs>
  }
  export type EPaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voucher?: boolean | EVoucherDefaultArgs<ExtArgs>
    bank?: boolean | EPayment$bankArgs<ExtArgs>
    card?: boolean | EPayment$cardArgs<ExtArgs>
  }

  export type $EPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EPayment"
    objects: {
      voucher: Prisma.$EVoucherPayload<ExtArgs>
      bank: Prisma.$EBankPayload<ExtArgs> | null
      card: Prisma.$ECardPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      voucherId: string
      method: $Enums.PaymentMethod
      amount: number
      currency: $Enums.Currency
      receivedAt: Date
      bankId: string | null
      cardId: string | null
      available: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ePayment"]>
    composites: {}
  }

  type EPaymentGetPayload<S extends boolean | null | undefined | EPaymentDefaultArgs> = $Result.GetResult<Prisma.$EPaymentPayload, S>

  type EPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EPaymentCountAggregateInputType | true
    }

  export interface EPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EPayment'], meta: { name: 'EPayment' } }
    /**
     * Find zero or one EPayment that matches the filter.
     * @param {EPaymentFindUniqueArgs} args - Arguments to find a EPayment
     * @example
     * // Get one EPayment
     * const ePayment = await prisma.ePayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EPaymentFindUniqueArgs>(args: SelectSubset<T, EPaymentFindUniqueArgs<ExtArgs>>): Prisma__EPaymentClient<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EPaymentFindUniqueOrThrowArgs} args - Arguments to find a EPayment
     * @example
     * // Get one EPayment
     * const ePayment = await prisma.ePayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, EPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EPaymentClient<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPaymentFindFirstArgs} args - Arguments to find a EPayment
     * @example
     * // Get one EPayment
     * const ePayment = await prisma.ePayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EPaymentFindFirstArgs>(args?: SelectSubset<T, EPaymentFindFirstArgs<ExtArgs>>): Prisma__EPaymentClient<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPaymentFindFirstOrThrowArgs} args - Arguments to find a EPayment
     * @example
     * // Get one EPayment
     * const ePayment = await prisma.ePayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, EPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EPaymentClient<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EPayments
     * const ePayments = await prisma.ePayment.findMany()
     * 
     * // Get first 10 EPayments
     * const ePayments = await prisma.ePayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ePaymentWithIdOnly = await prisma.ePayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EPaymentFindManyArgs>(args?: SelectSubset<T, EPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EPayment.
     * @param {EPaymentCreateArgs} args - Arguments to create a EPayment.
     * @example
     * // Create one EPayment
     * const EPayment = await prisma.ePayment.create({
     *   data: {
     *     // ... data to create a EPayment
     *   }
     * })
     * 
     */
    create<T extends EPaymentCreateArgs>(args: SelectSubset<T, EPaymentCreateArgs<ExtArgs>>): Prisma__EPaymentClient<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EPayments.
     * @param {EPaymentCreateManyArgs} args - Arguments to create many EPayments.
     * @example
     * // Create many EPayments
     * const ePayment = await prisma.ePayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EPaymentCreateManyArgs>(args?: SelectSubset<T, EPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EPayments and returns the data saved in the database.
     * @param {EPaymentCreateManyAndReturnArgs} args - Arguments to create many EPayments.
     * @example
     * // Create many EPayments
     * const ePayment = await prisma.ePayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EPayments and only return the `id`
     * const ePaymentWithIdOnly = await prisma.ePayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EPaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, EPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EPayment.
     * @param {EPaymentDeleteArgs} args - Arguments to delete one EPayment.
     * @example
     * // Delete one EPayment
     * const EPayment = await prisma.ePayment.delete({
     *   where: {
     *     // ... filter to delete one EPayment
     *   }
     * })
     * 
     */
    delete<T extends EPaymentDeleteArgs>(args: SelectSubset<T, EPaymentDeleteArgs<ExtArgs>>): Prisma__EPaymentClient<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EPayment.
     * @param {EPaymentUpdateArgs} args - Arguments to update one EPayment.
     * @example
     * // Update one EPayment
     * const ePayment = await prisma.ePayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EPaymentUpdateArgs>(args: SelectSubset<T, EPaymentUpdateArgs<ExtArgs>>): Prisma__EPaymentClient<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EPayments.
     * @param {EPaymentDeleteManyArgs} args - Arguments to filter EPayments to delete.
     * @example
     * // Delete a few EPayments
     * const { count } = await prisma.ePayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EPaymentDeleteManyArgs>(args?: SelectSubset<T, EPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EPayments
     * const ePayment = await prisma.ePayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EPaymentUpdateManyArgs>(args: SelectSubset<T, EPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EPayments and returns the data updated in the database.
     * @param {EPaymentUpdateManyAndReturnArgs} args - Arguments to update many EPayments.
     * @example
     * // Update many EPayments
     * const ePayment = await prisma.ePayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EPayments and only return the `id`
     * const ePaymentWithIdOnly = await prisma.ePayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EPaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, EPaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EPayment.
     * @param {EPaymentUpsertArgs} args - Arguments to update or create a EPayment.
     * @example
     * // Update or create a EPayment
     * const ePayment = await prisma.ePayment.upsert({
     *   create: {
     *     // ... data to create a EPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EPayment we want to update
     *   }
     * })
     */
    upsert<T extends EPaymentUpsertArgs>(args: SelectSubset<T, EPaymentUpsertArgs<ExtArgs>>): Prisma__EPaymentClient<$Result.GetResult<Prisma.$EPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPaymentCountArgs} args - Arguments to filter EPayments to count.
     * @example
     * // Count the number of EPayments
     * const count = await prisma.ePayment.count({
     *   where: {
     *     // ... the filter for the EPayments we want to count
     *   }
     * })
    **/
    count<T extends EPaymentCountArgs>(
      args?: Subset<T, EPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EPaymentAggregateArgs>(args: Subset<T, EPaymentAggregateArgs>): Prisma.PrismaPromise<GetEPaymentAggregateType<T>>

    /**
     * Group by EPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EPaymentGroupByArgs['orderBy'] }
        : { orderBy?: EPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EPayment model
   */
  readonly fields: EPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    voucher<T extends EVoucherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EVoucherDefaultArgs<ExtArgs>>): Prisma__EVoucherClient<$Result.GetResult<Prisma.$EVoucherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bank<T extends EPayment$bankArgs<ExtArgs> = {}>(args?: Subset<T, EPayment$bankArgs<ExtArgs>>): Prisma__EBankClient<$Result.GetResult<Prisma.$EBankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    card<T extends EPayment$cardArgs<ExtArgs> = {}>(args?: Subset<T, EPayment$cardArgs<ExtArgs>>): Prisma__ECardClient<$Result.GetResult<Prisma.$ECardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EPayment model
   */
  interface EPaymentFieldRefs {
    readonly id: FieldRef<"EPayment", 'String'>
    readonly voucherId: FieldRef<"EPayment", 'String'>
    readonly method: FieldRef<"EPayment", 'PaymentMethod'>
    readonly amount: FieldRef<"EPayment", 'Float'>
    readonly currency: FieldRef<"EPayment", 'Currency'>
    readonly receivedAt: FieldRef<"EPayment", 'DateTime'>
    readonly bankId: FieldRef<"EPayment", 'String'>
    readonly cardId: FieldRef<"EPayment", 'String'>
    readonly available: FieldRef<"EPayment", 'Boolean'>
    readonly createdAt: FieldRef<"EPayment", 'DateTime'>
    readonly updatedAt: FieldRef<"EPayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EPayment findUnique
   */
  export type EPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    /**
     * Filter, which EPayment to fetch.
     */
    where: EPaymentWhereUniqueInput
  }

  /**
   * EPayment findUniqueOrThrow
   */
  export type EPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    /**
     * Filter, which EPayment to fetch.
     */
    where: EPaymentWhereUniqueInput
  }

  /**
   * EPayment findFirst
   */
  export type EPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    /**
     * Filter, which EPayment to fetch.
     */
    where?: EPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EPayments to fetch.
     */
    orderBy?: EPaymentOrderByWithRelationInput | EPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EPayments.
     */
    cursor?: EPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EPayments.
     */
    distinct?: EPaymentScalarFieldEnum | EPaymentScalarFieldEnum[]
  }

  /**
   * EPayment findFirstOrThrow
   */
  export type EPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    /**
     * Filter, which EPayment to fetch.
     */
    where?: EPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EPayments to fetch.
     */
    orderBy?: EPaymentOrderByWithRelationInput | EPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EPayments.
     */
    cursor?: EPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EPayments.
     */
    distinct?: EPaymentScalarFieldEnum | EPaymentScalarFieldEnum[]
  }

  /**
   * EPayment findMany
   */
  export type EPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    /**
     * Filter, which EPayments to fetch.
     */
    where?: EPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EPayments to fetch.
     */
    orderBy?: EPaymentOrderByWithRelationInput | EPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EPayments.
     */
    cursor?: EPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EPayments.
     */
    skip?: number
    distinct?: EPaymentScalarFieldEnum | EPaymentScalarFieldEnum[]
  }

  /**
   * EPayment create
   */
  export type EPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a EPayment.
     */
    data: XOR<EPaymentCreateInput, EPaymentUncheckedCreateInput>
  }

  /**
   * EPayment createMany
   */
  export type EPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EPayments.
     */
    data: EPaymentCreateManyInput | EPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EPayment createManyAndReturn
   */
  export type EPaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * The data used to create many EPayments.
     */
    data: EPaymentCreateManyInput | EPaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EPayment update
   */
  export type EPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a EPayment.
     */
    data: XOR<EPaymentUpdateInput, EPaymentUncheckedUpdateInput>
    /**
     * Choose, which EPayment to update.
     */
    where: EPaymentWhereUniqueInput
  }

  /**
   * EPayment updateMany
   */
  export type EPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EPayments.
     */
    data: XOR<EPaymentUpdateManyMutationInput, EPaymentUncheckedUpdateManyInput>
    /**
     * Filter which EPayments to update
     */
    where?: EPaymentWhereInput
    /**
     * Limit how many EPayments to update.
     */
    limit?: number
  }

  /**
   * EPayment updateManyAndReturn
   */
  export type EPaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * The data used to update EPayments.
     */
    data: XOR<EPaymentUpdateManyMutationInput, EPaymentUncheckedUpdateManyInput>
    /**
     * Filter which EPayments to update
     */
    where?: EPaymentWhereInput
    /**
     * Limit how many EPayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EPayment upsert
   */
  export type EPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the EPayment to update in case it exists.
     */
    where: EPaymentWhereUniqueInput
    /**
     * In case the EPayment found by the `where` argument doesn't exist, create a new EPayment with this data.
     */
    create: XOR<EPaymentCreateInput, EPaymentUncheckedCreateInput>
    /**
     * In case the EPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EPaymentUpdateInput, EPaymentUncheckedUpdateInput>
  }

  /**
   * EPayment delete
   */
  export type EPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
    /**
     * Filter which EPayment to delete.
     */
    where: EPaymentWhereUniqueInput
  }

  /**
   * EPayment deleteMany
   */
  export type EPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EPayments to delete
     */
    where?: EPaymentWhereInput
    /**
     * Limit how many EPayments to delete.
     */
    limit?: number
  }

  /**
   * EPayment.bank
   */
  export type EPayment$bankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBank
     */
    select?: EBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBank
     */
    omit?: EBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBankInclude<ExtArgs> | null
    where?: EBankWhereInput
  }

  /**
   * EPayment.card
   */
  export type EPayment$cardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ECard
     */
    select?: ECardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ECard
     */
    omit?: ECardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ECardInclude<ExtArgs> | null
    where?: ECardWhereInput
  }

  /**
   * EPayment without action
   */
  export type EPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EPayment
     */
    select?: EPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EPayment
     */
    omit?: EPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EPaymentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EVoucherScalarFieldEnum: {
    id: 'id',
    arcaCae: 'arcaCae',
    arcaDueDate: 'arcaDueDate',
    type: 'type',
    pointOfSale: 'pointOfSale',
    voucherNumber: 'voucherNumber',
    emissionDate: 'emissionDate',
    dueDate: 'dueDate',
    status: 'status',
    contactId: 'contactId',
    conditionPayment: 'conditionPayment',
    totalAmount: 'totalAmount',
    ivaAmount: 'ivaAmount',
    paidAmount: 'paidAmount',
    observation: 'observation',
    available: 'available',
    afipRequestData: 'afipRequestData',
    afipResponseData: 'afipResponseData',
    associatedVoucherNumber: 'associatedVoucherNumber',
    associatedVoucherType: 'associatedVoucherType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EVoucherScalarFieldEnum = (typeof EVoucherScalarFieldEnum)[keyof typeof EVoucherScalarFieldEnum]


  export const EVoucherProductScalarFieldEnum: {
    id: 'id',
    code: 'code',
    voucherId: 'voucherId',
    description: 'description',
    productId: 'productId',
    quantity: 'quantity',
    price: 'price'
  };

  export type EVoucherProductScalarFieldEnum = (typeof EVoucherProductScalarFieldEnum)[keyof typeof EVoucherProductScalarFieldEnum]


  export const EBankScalarFieldEnum: {
    id: 'id',
    name: 'name',
    account: 'account',
    cbu: 'cbu',
    currency: 'currency',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    available: 'available'
  };

  export type EBankScalarFieldEnum = (typeof EBankScalarFieldEnum)[keyof typeof EBankScalarFieldEnum]


  export const ECardScalarFieldEnum: {
    id: 'id',
    available: 'available',
    commissionPercentage: 'commissionPercentage'
  };

  export type ECardScalarFieldEnum = (typeof ECardScalarFieldEnum)[keyof typeof ECardScalarFieldEnum]


  export const EPaymentScalarFieldEnum: {
    id: 'id',
    voucherId: 'voucherId',
    method: 'method',
    amount: 'amount',
    currency: 'currency',
    receivedAt: 'receivedAt',
    bankId: 'bankId',
    cardId: 'cardId',
    available: 'available',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EPaymentScalarFieldEnum = (typeof EPaymentScalarFieldEnum)[keyof typeof EPaymentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'VoucherType'
   */
  export type EnumVoucherTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VoucherType'>
    


  /**
   * Reference to a field of type 'VoucherType[]'
   */
  export type ListEnumVoucherTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VoucherType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'VoucherStatus'
   */
  export type EnumVoucherStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VoucherStatus'>
    


  /**
   * Reference to a field of type 'VoucherStatus[]'
   */
  export type ListEnumVoucherStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VoucherStatus[]'>
    


  /**
   * Reference to a field of type 'ConditionPayment'
   */
  export type EnumConditionPaymentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConditionPayment'>
    


  /**
   * Reference to a field of type 'ConditionPayment[]'
   */
  export type ListEnumConditionPaymentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConditionPayment[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Currency'
   */
  export type EnumCurrencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Currency'>
    


  /**
   * Reference to a field of type 'Currency[]'
   */
  export type ListEnumCurrencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Currency[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    
  /**
   * Deep Input Types
   */


  export type EVoucherWhereInput = {
    AND?: EVoucherWhereInput | EVoucherWhereInput[]
    OR?: EVoucherWhereInput[]
    NOT?: EVoucherWhereInput | EVoucherWhereInput[]
    id?: StringFilter<"EVoucher"> | string
    arcaCae?: StringNullableFilter<"EVoucher"> | string | null
    arcaDueDate?: StringNullableFilter<"EVoucher"> | string | null
    type?: EnumVoucherTypeFilter<"EVoucher"> | $Enums.VoucherType
    pointOfSale?: IntFilter<"EVoucher"> | number
    voucherNumber?: IntFilter<"EVoucher"> | number
    emissionDate?: DateTimeFilter<"EVoucher"> | Date | string
    dueDate?: DateTimeNullableFilter<"EVoucher"> | Date | string | null
    status?: EnumVoucherStatusFilter<"EVoucher"> | $Enums.VoucherStatus
    contactId?: StringNullableFilter<"EVoucher"> | string | null
    conditionPayment?: EnumConditionPaymentNullableFilter<"EVoucher"> | $Enums.ConditionPayment | null
    totalAmount?: FloatNullableFilter<"EVoucher"> | number | null
    ivaAmount?: FloatNullableFilter<"EVoucher"> | number | null
    paidAmount?: FloatFilter<"EVoucher"> | number
    observation?: StringNullableFilter<"EVoucher"> | string | null
    available?: BoolFilter<"EVoucher"> | boolean
    afipRequestData?: JsonNullableFilter<"EVoucher">
    afipResponseData?: JsonNullableFilter<"EVoucher">
    associatedVoucherNumber?: FloatNullableFilter<"EVoucher"> | number | null
    associatedVoucherType?: EnumVoucherTypeNullableFilter<"EVoucher"> | $Enums.VoucherType | null
    createdAt?: DateTimeFilter<"EVoucher"> | Date | string
    updatedAt?: DateTimeFilter<"EVoucher"> | Date | string
    products?: EVoucherProductListRelationFilter
    Payments?: EPaymentListRelationFilter
  }

  export type EVoucherOrderByWithRelationInput = {
    id?: SortOrder
    arcaCae?: SortOrderInput | SortOrder
    arcaDueDate?: SortOrderInput | SortOrder
    type?: SortOrder
    pointOfSale?: SortOrder
    voucherNumber?: SortOrder
    emissionDate?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    status?: SortOrder
    contactId?: SortOrderInput | SortOrder
    conditionPayment?: SortOrderInput | SortOrder
    totalAmount?: SortOrderInput | SortOrder
    ivaAmount?: SortOrderInput | SortOrder
    paidAmount?: SortOrder
    observation?: SortOrderInput | SortOrder
    available?: SortOrder
    afipRequestData?: SortOrderInput | SortOrder
    afipResponseData?: SortOrderInput | SortOrder
    associatedVoucherNumber?: SortOrderInput | SortOrder
    associatedVoucherType?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    products?: EVoucherProductOrderByRelationAggregateInput
    Payments?: EPaymentOrderByRelationAggregateInput
  }

  export type EVoucherWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EVoucherWhereInput | EVoucherWhereInput[]
    OR?: EVoucherWhereInput[]
    NOT?: EVoucherWhereInput | EVoucherWhereInput[]
    arcaCae?: StringNullableFilter<"EVoucher"> | string | null
    arcaDueDate?: StringNullableFilter<"EVoucher"> | string | null
    type?: EnumVoucherTypeFilter<"EVoucher"> | $Enums.VoucherType
    pointOfSale?: IntFilter<"EVoucher"> | number
    voucherNumber?: IntFilter<"EVoucher"> | number
    emissionDate?: DateTimeFilter<"EVoucher"> | Date | string
    dueDate?: DateTimeNullableFilter<"EVoucher"> | Date | string | null
    status?: EnumVoucherStatusFilter<"EVoucher"> | $Enums.VoucherStatus
    contactId?: StringNullableFilter<"EVoucher"> | string | null
    conditionPayment?: EnumConditionPaymentNullableFilter<"EVoucher"> | $Enums.ConditionPayment | null
    totalAmount?: FloatNullableFilter<"EVoucher"> | number | null
    ivaAmount?: FloatNullableFilter<"EVoucher"> | number | null
    paidAmount?: FloatFilter<"EVoucher"> | number
    observation?: StringNullableFilter<"EVoucher"> | string | null
    available?: BoolFilter<"EVoucher"> | boolean
    afipRequestData?: JsonNullableFilter<"EVoucher">
    afipResponseData?: JsonNullableFilter<"EVoucher">
    associatedVoucherNumber?: FloatNullableFilter<"EVoucher"> | number | null
    associatedVoucherType?: EnumVoucherTypeNullableFilter<"EVoucher"> | $Enums.VoucherType | null
    createdAt?: DateTimeFilter<"EVoucher"> | Date | string
    updatedAt?: DateTimeFilter<"EVoucher"> | Date | string
    products?: EVoucherProductListRelationFilter
    Payments?: EPaymentListRelationFilter
  }, "id">

  export type EVoucherOrderByWithAggregationInput = {
    id?: SortOrder
    arcaCae?: SortOrderInput | SortOrder
    arcaDueDate?: SortOrderInput | SortOrder
    type?: SortOrder
    pointOfSale?: SortOrder
    voucherNumber?: SortOrder
    emissionDate?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    status?: SortOrder
    contactId?: SortOrderInput | SortOrder
    conditionPayment?: SortOrderInput | SortOrder
    totalAmount?: SortOrderInput | SortOrder
    ivaAmount?: SortOrderInput | SortOrder
    paidAmount?: SortOrder
    observation?: SortOrderInput | SortOrder
    available?: SortOrder
    afipRequestData?: SortOrderInput | SortOrder
    afipResponseData?: SortOrderInput | SortOrder
    associatedVoucherNumber?: SortOrderInput | SortOrder
    associatedVoucherType?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EVoucherCountOrderByAggregateInput
    _avg?: EVoucherAvgOrderByAggregateInput
    _max?: EVoucherMaxOrderByAggregateInput
    _min?: EVoucherMinOrderByAggregateInput
    _sum?: EVoucherSumOrderByAggregateInput
  }

  export type EVoucherScalarWhereWithAggregatesInput = {
    AND?: EVoucherScalarWhereWithAggregatesInput | EVoucherScalarWhereWithAggregatesInput[]
    OR?: EVoucherScalarWhereWithAggregatesInput[]
    NOT?: EVoucherScalarWhereWithAggregatesInput | EVoucherScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EVoucher"> | string
    arcaCae?: StringNullableWithAggregatesFilter<"EVoucher"> | string | null
    arcaDueDate?: StringNullableWithAggregatesFilter<"EVoucher"> | string | null
    type?: EnumVoucherTypeWithAggregatesFilter<"EVoucher"> | $Enums.VoucherType
    pointOfSale?: IntWithAggregatesFilter<"EVoucher"> | number
    voucherNumber?: IntWithAggregatesFilter<"EVoucher"> | number
    emissionDate?: DateTimeWithAggregatesFilter<"EVoucher"> | Date | string
    dueDate?: DateTimeNullableWithAggregatesFilter<"EVoucher"> | Date | string | null
    status?: EnumVoucherStatusWithAggregatesFilter<"EVoucher"> | $Enums.VoucherStatus
    contactId?: StringNullableWithAggregatesFilter<"EVoucher"> | string | null
    conditionPayment?: EnumConditionPaymentNullableWithAggregatesFilter<"EVoucher"> | $Enums.ConditionPayment | null
    totalAmount?: FloatNullableWithAggregatesFilter<"EVoucher"> | number | null
    ivaAmount?: FloatNullableWithAggregatesFilter<"EVoucher"> | number | null
    paidAmount?: FloatWithAggregatesFilter<"EVoucher"> | number
    observation?: StringNullableWithAggregatesFilter<"EVoucher"> | string | null
    available?: BoolWithAggregatesFilter<"EVoucher"> | boolean
    afipRequestData?: JsonNullableWithAggregatesFilter<"EVoucher">
    afipResponseData?: JsonNullableWithAggregatesFilter<"EVoucher">
    associatedVoucherNumber?: FloatNullableWithAggregatesFilter<"EVoucher"> | number | null
    associatedVoucherType?: EnumVoucherTypeNullableWithAggregatesFilter<"EVoucher"> | $Enums.VoucherType | null
    createdAt?: DateTimeWithAggregatesFilter<"EVoucher"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EVoucher"> | Date | string
  }

  export type EVoucherProductWhereInput = {
    AND?: EVoucherProductWhereInput | EVoucherProductWhereInput[]
    OR?: EVoucherProductWhereInput[]
    NOT?: EVoucherProductWhereInput | EVoucherProductWhereInput[]
    id?: StringFilter<"EVoucherProduct"> | string
    code?: StringFilter<"EVoucherProduct"> | string
    voucherId?: StringFilter<"EVoucherProduct"> | string
    description?: StringFilter<"EVoucherProduct"> | string
    productId?: StringFilter<"EVoucherProduct"> | string
    quantity?: IntFilter<"EVoucherProduct"> | number
    price?: FloatFilter<"EVoucherProduct"> | number
    voucher?: XOR<EVoucherScalarRelationFilter, EVoucherWhereInput>
  }

  export type EVoucherProductOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    voucherId?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    voucher?: EVoucherOrderByWithRelationInput
  }

  export type EVoucherProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EVoucherProductWhereInput | EVoucherProductWhereInput[]
    OR?: EVoucherProductWhereInput[]
    NOT?: EVoucherProductWhereInput | EVoucherProductWhereInput[]
    code?: StringFilter<"EVoucherProduct"> | string
    voucherId?: StringFilter<"EVoucherProduct"> | string
    description?: StringFilter<"EVoucherProduct"> | string
    productId?: StringFilter<"EVoucherProduct"> | string
    quantity?: IntFilter<"EVoucherProduct"> | number
    price?: FloatFilter<"EVoucherProduct"> | number
    voucher?: XOR<EVoucherScalarRelationFilter, EVoucherWhereInput>
  }, "id">

  export type EVoucherProductOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    voucherId?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    _count?: EVoucherProductCountOrderByAggregateInput
    _avg?: EVoucherProductAvgOrderByAggregateInput
    _max?: EVoucherProductMaxOrderByAggregateInput
    _min?: EVoucherProductMinOrderByAggregateInput
    _sum?: EVoucherProductSumOrderByAggregateInput
  }

  export type EVoucherProductScalarWhereWithAggregatesInput = {
    AND?: EVoucherProductScalarWhereWithAggregatesInput | EVoucherProductScalarWhereWithAggregatesInput[]
    OR?: EVoucherProductScalarWhereWithAggregatesInput[]
    NOT?: EVoucherProductScalarWhereWithAggregatesInput | EVoucherProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EVoucherProduct"> | string
    code?: StringWithAggregatesFilter<"EVoucherProduct"> | string
    voucherId?: StringWithAggregatesFilter<"EVoucherProduct"> | string
    description?: StringWithAggregatesFilter<"EVoucherProduct"> | string
    productId?: StringWithAggregatesFilter<"EVoucherProduct"> | string
    quantity?: IntWithAggregatesFilter<"EVoucherProduct"> | number
    price?: FloatWithAggregatesFilter<"EVoucherProduct"> | number
  }

  export type EBankWhereInput = {
    AND?: EBankWhereInput | EBankWhereInput[]
    OR?: EBankWhereInput[]
    NOT?: EBankWhereInput | EBankWhereInput[]
    id?: StringFilter<"EBank"> | string
    name?: StringFilter<"EBank"> | string
    account?: StringNullableFilter<"EBank"> | string | null
    cbu?: StringNullableFilter<"EBank"> | string | null
    currency?: EnumCurrencyFilter<"EBank"> | $Enums.Currency
    createdAt?: DateTimeFilter<"EBank"> | Date | string
    updatedAt?: DateTimeFilter<"EBank"> | Date | string
    available?: BoolFilter<"EBank"> | boolean
    payments?: EPaymentListRelationFilter
  }

  export type EBankOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    account?: SortOrderInput | SortOrder
    cbu?: SortOrderInput | SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    available?: SortOrder
    payments?: EPaymentOrderByRelationAggregateInput
  }

  export type EBankWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EBankWhereInput | EBankWhereInput[]
    OR?: EBankWhereInput[]
    NOT?: EBankWhereInput | EBankWhereInput[]
    name?: StringFilter<"EBank"> | string
    account?: StringNullableFilter<"EBank"> | string | null
    cbu?: StringNullableFilter<"EBank"> | string | null
    currency?: EnumCurrencyFilter<"EBank"> | $Enums.Currency
    createdAt?: DateTimeFilter<"EBank"> | Date | string
    updatedAt?: DateTimeFilter<"EBank"> | Date | string
    available?: BoolFilter<"EBank"> | boolean
    payments?: EPaymentListRelationFilter
  }, "id">

  export type EBankOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    account?: SortOrderInput | SortOrder
    cbu?: SortOrderInput | SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    available?: SortOrder
    _count?: EBankCountOrderByAggregateInput
    _max?: EBankMaxOrderByAggregateInput
    _min?: EBankMinOrderByAggregateInput
  }

  export type EBankScalarWhereWithAggregatesInput = {
    AND?: EBankScalarWhereWithAggregatesInput | EBankScalarWhereWithAggregatesInput[]
    OR?: EBankScalarWhereWithAggregatesInput[]
    NOT?: EBankScalarWhereWithAggregatesInput | EBankScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EBank"> | string
    name?: StringWithAggregatesFilter<"EBank"> | string
    account?: StringNullableWithAggregatesFilter<"EBank"> | string | null
    cbu?: StringNullableWithAggregatesFilter<"EBank"> | string | null
    currency?: EnumCurrencyWithAggregatesFilter<"EBank"> | $Enums.Currency
    createdAt?: DateTimeWithAggregatesFilter<"EBank"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EBank"> | Date | string
    available?: BoolWithAggregatesFilter<"EBank"> | boolean
  }

  export type ECardWhereInput = {
    AND?: ECardWhereInput | ECardWhereInput[]
    OR?: ECardWhereInput[]
    NOT?: ECardWhereInput | ECardWhereInput[]
    id?: StringFilter<"ECard"> | string
    available?: BoolFilter<"ECard"> | boolean
    commissionPercentage?: IntNullableFilter<"ECard"> | number | null
    payments?: EPaymentListRelationFilter
  }

  export type ECardOrderByWithRelationInput = {
    id?: SortOrder
    available?: SortOrder
    commissionPercentage?: SortOrderInput | SortOrder
    payments?: EPaymentOrderByRelationAggregateInput
  }

  export type ECardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ECardWhereInput | ECardWhereInput[]
    OR?: ECardWhereInput[]
    NOT?: ECardWhereInput | ECardWhereInput[]
    available?: BoolFilter<"ECard"> | boolean
    commissionPercentage?: IntNullableFilter<"ECard"> | number | null
    payments?: EPaymentListRelationFilter
  }, "id">

  export type ECardOrderByWithAggregationInput = {
    id?: SortOrder
    available?: SortOrder
    commissionPercentage?: SortOrderInput | SortOrder
    _count?: ECardCountOrderByAggregateInput
    _avg?: ECardAvgOrderByAggregateInput
    _max?: ECardMaxOrderByAggregateInput
    _min?: ECardMinOrderByAggregateInput
    _sum?: ECardSumOrderByAggregateInput
  }

  export type ECardScalarWhereWithAggregatesInput = {
    AND?: ECardScalarWhereWithAggregatesInput | ECardScalarWhereWithAggregatesInput[]
    OR?: ECardScalarWhereWithAggregatesInput[]
    NOT?: ECardScalarWhereWithAggregatesInput | ECardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ECard"> | string
    available?: BoolWithAggregatesFilter<"ECard"> | boolean
    commissionPercentage?: IntNullableWithAggregatesFilter<"ECard"> | number | null
  }

  export type EPaymentWhereInput = {
    AND?: EPaymentWhereInput | EPaymentWhereInput[]
    OR?: EPaymentWhereInput[]
    NOT?: EPaymentWhereInput | EPaymentWhereInput[]
    id?: StringFilter<"EPayment"> | string
    voucherId?: StringFilter<"EPayment"> | string
    method?: EnumPaymentMethodFilter<"EPayment"> | $Enums.PaymentMethod
    amount?: FloatFilter<"EPayment"> | number
    currency?: EnumCurrencyFilter<"EPayment"> | $Enums.Currency
    receivedAt?: DateTimeFilter<"EPayment"> | Date | string
    bankId?: StringNullableFilter<"EPayment"> | string | null
    cardId?: StringNullableFilter<"EPayment"> | string | null
    available?: BoolFilter<"EPayment"> | boolean
    createdAt?: DateTimeFilter<"EPayment"> | Date | string
    updatedAt?: DateTimeFilter<"EPayment"> | Date | string
    voucher?: XOR<EVoucherScalarRelationFilter, EVoucherWhereInput>
    bank?: XOR<EBankNullableScalarRelationFilter, EBankWhereInput> | null
    card?: XOR<ECardNullableScalarRelationFilter, ECardWhereInput> | null
  }

  export type EPaymentOrderByWithRelationInput = {
    id?: SortOrder
    voucherId?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    receivedAt?: SortOrder
    bankId?: SortOrderInput | SortOrder
    cardId?: SortOrderInput | SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    voucher?: EVoucherOrderByWithRelationInput
    bank?: EBankOrderByWithRelationInput
    card?: ECardOrderByWithRelationInput
  }

  export type EPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EPaymentWhereInput | EPaymentWhereInput[]
    OR?: EPaymentWhereInput[]
    NOT?: EPaymentWhereInput | EPaymentWhereInput[]
    voucherId?: StringFilter<"EPayment"> | string
    method?: EnumPaymentMethodFilter<"EPayment"> | $Enums.PaymentMethod
    amount?: FloatFilter<"EPayment"> | number
    currency?: EnumCurrencyFilter<"EPayment"> | $Enums.Currency
    receivedAt?: DateTimeFilter<"EPayment"> | Date | string
    bankId?: StringNullableFilter<"EPayment"> | string | null
    cardId?: StringNullableFilter<"EPayment"> | string | null
    available?: BoolFilter<"EPayment"> | boolean
    createdAt?: DateTimeFilter<"EPayment"> | Date | string
    updatedAt?: DateTimeFilter<"EPayment"> | Date | string
    voucher?: XOR<EVoucherScalarRelationFilter, EVoucherWhereInput>
    bank?: XOR<EBankNullableScalarRelationFilter, EBankWhereInput> | null
    card?: XOR<ECardNullableScalarRelationFilter, ECardWhereInput> | null
  }, "id">

  export type EPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    voucherId?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    receivedAt?: SortOrder
    bankId?: SortOrderInput | SortOrder
    cardId?: SortOrderInput | SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EPaymentCountOrderByAggregateInput
    _avg?: EPaymentAvgOrderByAggregateInput
    _max?: EPaymentMaxOrderByAggregateInput
    _min?: EPaymentMinOrderByAggregateInput
    _sum?: EPaymentSumOrderByAggregateInput
  }

  export type EPaymentScalarWhereWithAggregatesInput = {
    AND?: EPaymentScalarWhereWithAggregatesInput | EPaymentScalarWhereWithAggregatesInput[]
    OR?: EPaymentScalarWhereWithAggregatesInput[]
    NOT?: EPaymentScalarWhereWithAggregatesInput | EPaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EPayment"> | string
    voucherId?: StringWithAggregatesFilter<"EPayment"> | string
    method?: EnumPaymentMethodWithAggregatesFilter<"EPayment"> | $Enums.PaymentMethod
    amount?: FloatWithAggregatesFilter<"EPayment"> | number
    currency?: EnumCurrencyWithAggregatesFilter<"EPayment"> | $Enums.Currency
    receivedAt?: DateTimeWithAggregatesFilter<"EPayment"> | Date | string
    bankId?: StringNullableWithAggregatesFilter<"EPayment"> | string | null
    cardId?: StringNullableWithAggregatesFilter<"EPayment"> | string | null
    available?: BoolWithAggregatesFilter<"EPayment"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"EPayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EPayment"> | Date | string
  }

  export type EVoucherCreateInput = {
    id?: string
    arcaCae?: string | null
    arcaDueDate?: string | null
    type: $Enums.VoucherType
    pointOfSale: number
    voucherNumber: number
    emissionDate?: Date | string
    dueDate?: Date | string | null
    status?: $Enums.VoucherStatus
    contactId?: string | null
    conditionPayment?: $Enums.ConditionPayment | null
    totalAmount?: number | null
    ivaAmount?: number | null
    paidAmount?: number
    observation?: string | null
    available?: boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: number | null
    associatedVoucherType?: $Enums.VoucherType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: EVoucherProductCreateNestedManyWithoutVoucherInput
    Payments?: EPaymentCreateNestedManyWithoutVoucherInput
  }

  export type EVoucherUncheckedCreateInput = {
    id?: string
    arcaCae?: string | null
    arcaDueDate?: string | null
    type: $Enums.VoucherType
    pointOfSale: number
    voucherNumber: number
    emissionDate?: Date | string
    dueDate?: Date | string | null
    status?: $Enums.VoucherStatus
    contactId?: string | null
    conditionPayment?: $Enums.ConditionPayment | null
    totalAmount?: number | null
    ivaAmount?: number | null
    paidAmount?: number
    observation?: string | null
    available?: boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: number | null
    associatedVoucherType?: $Enums.VoucherType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: EVoucherProductUncheckedCreateNestedManyWithoutVoucherInput
    Payments?: EPaymentUncheckedCreateNestedManyWithoutVoucherInput
  }

  export type EVoucherUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    arcaCae?: NullableStringFieldUpdateOperationsInput | string | null
    arcaDueDate?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType
    pointOfSale?: IntFieldUpdateOperationsInput | number
    voucherNumber?: IntFieldUpdateOperationsInput | number
    emissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumVoucherStatusFieldUpdateOperationsInput | $Enums.VoucherStatus
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    conditionPayment?: NullableEnumConditionPaymentFieldUpdateOperationsInput | $Enums.ConditionPayment | null
    totalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    ivaAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAmount?: FloatFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: NullableFloatFieldUpdateOperationsInput | number | null
    associatedVoucherType?: NullableEnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: EVoucherProductUpdateManyWithoutVoucherNestedInput
    Payments?: EPaymentUpdateManyWithoutVoucherNestedInput
  }

  export type EVoucherUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    arcaCae?: NullableStringFieldUpdateOperationsInput | string | null
    arcaDueDate?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType
    pointOfSale?: IntFieldUpdateOperationsInput | number
    voucherNumber?: IntFieldUpdateOperationsInput | number
    emissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumVoucherStatusFieldUpdateOperationsInput | $Enums.VoucherStatus
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    conditionPayment?: NullableEnumConditionPaymentFieldUpdateOperationsInput | $Enums.ConditionPayment | null
    totalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    ivaAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAmount?: FloatFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: NullableFloatFieldUpdateOperationsInput | number | null
    associatedVoucherType?: NullableEnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: EVoucherProductUncheckedUpdateManyWithoutVoucherNestedInput
    Payments?: EPaymentUncheckedUpdateManyWithoutVoucherNestedInput
  }

  export type EVoucherCreateManyInput = {
    id?: string
    arcaCae?: string | null
    arcaDueDate?: string | null
    type: $Enums.VoucherType
    pointOfSale: number
    voucherNumber: number
    emissionDate?: Date | string
    dueDate?: Date | string | null
    status?: $Enums.VoucherStatus
    contactId?: string | null
    conditionPayment?: $Enums.ConditionPayment | null
    totalAmount?: number | null
    ivaAmount?: number | null
    paidAmount?: number
    observation?: string | null
    available?: boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: number | null
    associatedVoucherType?: $Enums.VoucherType | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EVoucherUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    arcaCae?: NullableStringFieldUpdateOperationsInput | string | null
    arcaDueDate?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType
    pointOfSale?: IntFieldUpdateOperationsInput | number
    voucherNumber?: IntFieldUpdateOperationsInput | number
    emissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumVoucherStatusFieldUpdateOperationsInput | $Enums.VoucherStatus
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    conditionPayment?: NullableEnumConditionPaymentFieldUpdateOperationsInput | $Enums.ConditionPayment | null
    totalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    ivaAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAmount?: FloatFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: NullableFloatFieldUpdateOperationsInput | number | null
    associatedVoucherType?: NullableEnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EVoucherUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    arcaCae?: NullableStringFieldUpdateOperationsInput | string | null
    arcaDueDate?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType
    pointOfSale?: IntFieldUpdateOperationsInput | number
    voucherNumber?: IntFieldUpdateOperationsInput | number
    emissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumVoucherStatusFieldUpdateOperationsInput | $Enums.VoucherStatus
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    conditionPayment?: NullableEnumConditionPaymentFieldUpdateOperationsInput | $Enums.ConditionPayment | null
    totalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    ivaAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAmount?: FloatFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: NullableFloatFieldUpdateOperationsInput | number | null
    associatedVoucherType?: NullableEnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EVoucherProductCreateInput = {
    id?: string
    code: string
    description: string
    productId: string
    quantity: number
    price: number
    voucher: EVoucherCreateNestedOneWithoutProductsInput
  }

  export type EVoucherProductUncheckedCreateInput = {
    id?: string
    code: string
    voucherId: string
    description: string
    productId: string
    quantity: number
    price: number
  }

  export type EVoucherProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    voucher?: EVoucherUpdateOneRequiredWithoutProductsNestedInput
  }

  export type EVoucherProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    voucherId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type EVoucherProductCreateManyInput = {
    id?: string
    code: string
    voucherId: string
    description: string
    productId: string
    quantity: number
    price: number
  }

  export type EVoucherProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type EVoucherProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    voucherId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type EBankCreateInput = {
    id?: string
    name: string
    account?: string | null
    cbu?: string | null
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    available?: boolean
    payments?: EPaymentCreateNestedManyWithoutBankInput
  }

  export type EBankUncheckedCreateInput = {
    id?: string
    name: string
    account?: string | null
    cbu?: string | null
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    available?: boolean
    payments?: EPaymentUncheckedCreateNestedManyWithoutBankInput
  }

  export type EBankUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    account?: NullableStringFieldUpdateOperationsInput | string | null
    cbu?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
    payments?: EPaymentUpdateManyWithoutBankNestedInput
  }

  export type EBankUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    account?: NullableStringFieldUpdateOperationsInput | string | null
    cbu?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
    payments?: EPaymentUncheckedUpdateManyWithoutBankNestedInput
  }

  export type EBankCreateManyInput = {
    id?: string
    name: string
    account?: string | null
    cbu?: string | null
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    available?: boolean
  }

  export type EBankUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    account?: NullableStringFieldUpdateOperationsInput | string | null
    cbu?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EBankUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    account?: NullableStringFieldUpdateOperationsInput | string | null
    cbu?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ECardCreateInput = {
    id?: string
    available?: boolean
    commissionPercentage?: number | null
    payments?: EPaymentCreateNestedManyWithoutCardInput
  }

  export type ECardUncheckedCreateInput = {
    id?: string
    available?: boolean
    commissionPercentage?: number | null
    payments?: EPaymentUncheckedCreateNestedManyWithoutCardInput
  }

  export type ECardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    commissionPercentage?: NullableIntFieldUpdateOperationsInput | number | null
    payments?: EPaymentUpdateManyWithoutCardNestedInput
  }

  export type ECardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    commissionPercentage?: NullableIntFieldUpdateOperationsInput | number | null
    payments?: EPaymentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type ECardCreateManyInput = {
    id?: string
    available?: boolean
    commissionPercentage?: number | null
  }

  export type ECardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    commissionPercentage?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ECardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    commissionPercentage?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EPaymentCreateInput = {
    id?: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    voucher: EVoucherCreateNestedOneWithoutPaymentsInput
    bank?: EBankCreateNestedOneWithoutPaymentsInput
    card?: ECardCreateNestedOneWithoutPaymentsInput
  }

  export type EPaymentUncheckedCreateInput = {
    id?: string
    voucherId: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    bankId?: string | null
    cardId?: string | null
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EPaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher?: EVoucherUpdateOneRequiredWithoutPaymentsNestedInput
    bank?: EBankUpdateOneWithoutPaymentsNestedInput
    card?: ECardUpdateOneWithoutPaymentsNestedInput
  }

  export type EPaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    voucherId?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankId?: NullableStringFieldUpdateOperationsInput | string | null
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EPaymentCreateManyInput = {
    id?: string
    voucherId: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    bankId?: string | null
    cardId?: string | null
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EPaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EPaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    voucherId?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankId?: NullableStringFieldUpdateOperationsInput | string | null
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumVoucherTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherType | EnumVoucherTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoucherTypeFilter<$PrismaModel> | $Enums.VoucherType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumVoucherStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherStatus | EnumVoucherStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VoucherStatus[] | ListEnumVoucherStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoucherStatus[] | ListEnumVoucherStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVoucherStatusFilter<$PrismaModel> | $Enums.VoucherStatus
  }

  export type EnumConditionPaymentNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ConditionPayment | EnumConditionPaymentFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConditionPayment[] | ListEnumConditionPaymentFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConditionPayment[] | ListEnumConditionPaymentFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConditionPaymentNullableFilter<$PrismaModel> | $Enums.ConditionPayment | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumVoucherTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherType | EnumVoucherTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumVoucherTypeNullableFilter<$PrismaModel> | $Enums.VoucherType | null
  }

  export type EVoucherProductListRelationFilter = {
    every?: EVoucherProductWhereInput
    some?: EVoucherProductWhereInput
    none?: EVoucherProductWhereInput
  }

  export type EPaymentListRelationFilter = {
    every?: EPaymentWhereInput
    some?: EPaymentWhereInput
    none?: EPaymentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EVoucherProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EVoucherCountOrderByAggregateInput = {
    id?: SortOrder
    arcaCae?: SortOrder
    arcaDueDate?: SortOrder
    type?: SortOrder
    pointOfSale?: SortOrder
    voucherNumber?: SortOrder
    emissionDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    contactId?: SortOrder
    conditionPayment?: SortOrder
    totalAmount?: SortOrder
    ivaAmount?: SortOrder
    paidAmount?: SortOrder
    observation?: SortOrder
    available?: SortOrder
    afipRequestData?: SortOrder
    afipResponseData?: SortOrder
    associatedVoucherNumber?: SortOrder
    associatedVoucherType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EVoucherAvgOrderByAggregateInput = {
    pointOfSale?: SortOrder
    voucherNumber?: SortOrder
    totalAmount?: SortOrder
    ivaAmount?: SortOrder
    paidAmount?: SortOrder
    associatedVoucherNumber?: SortOrder
  }

  export type EVoucherMaxOrderByAggregateInput = {
    id?: SortOrder
    arcaCae?: SortOrder
    arcaDueDate?: SortOrder
    type?: SortOrder
    pointOfSale?: SortOrder
    voucherNumber?: SortOrder
    emissionDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    contactId?: SortOrder
    conditionPayment?: SortOrder
    totalAmount?: SortOrder
    ivaAmount?: SortOrder
    paidAmount?: SortOrder
    observation?: SortOrder
    available?: SortOrder
    associatedVoucherNumber?: SortOrder
    associatedVoucherType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EVoucherMinOrderByAggregateInput = {
    id?: SortOrder
    arcaCae?: SortOrder
    arcaDueDate?: SortOrder
    type?: SortOrder
    pointOfSale?: SortOrder
    voucherNumber?: SortOrder
    emissionDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    contactId?: SortOrder
    conditionPayment?: SortOrder
    totalAmount?: SortOrder
    ivaAmount?: SortOrder
    paidAmount?: SortOrder
    observation?: SortOrder
    available?: SortOrder
    associatedVoucherNumber?: SortOrder
    associatedVoucherType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EVoucherSumOrderByAggregateInput = {
    pointOfSale?: SortOrder
    voucherNumber?: SortOrder
    totalAmount?: SortOrder
    ivaAmount?: SortOrder
    paidAmount?: SortOrder
    associatedVoucherNumber?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumVoucherTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherType | EnumVoucherTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoucherTypeWithAggregatesFilter<$PrismaModel> | $Enums.VoucherType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVoucherTypeFilter<$PrismaModel>
    _max?: NestedEnumVoucherTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumVoucherStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherStatus | EnumVoucherStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VoucherStatus[] | ListEnumVoucherStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoucherStatus[] | ListEnumVoucherStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVoucherStatusWithAggregatesFilter<$PrismaModel> | $Enums.VoucherStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVoucherStatusFilter<$PrismaModel>
    _max?: NestedEnumVoucherStatusFilter<$PrismaModel>
  }

  export type EnumConditionPaymentNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConditionPayment | EnumConditionPaymentFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConditionPayment[] | ListEnumConditionPaymentFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConditionPayment[] | ListEnumConditionPaymentFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConditionPaymentNullableWithAggregatesFilter<$PrismaModel> | $Enums.ConditionPayment | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumConditionPaymentNullableFilter<$PrismaModel>
    _max?: NestedEnumConditionPaymentNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumVoucherTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherType | EnumVoucherTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumVoucherTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.VoucherType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumVoucherTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumVoucherTypeNullableFilter<$PrismaModel>
  }

  export type EVoucherScalarRelationFilter = {
    is?: EVoucherWhereInput
    isNot?: EVoucherWhereInput
  }

  export type EVoucherProductCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    voucherId?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type EVoucherProductAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type EVoucherProductMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    voucherId?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type EVoucherProductMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    voucherId?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type EVoucherProductSumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type EnumCurrencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyFilter<$PrismaModel> | $Enums.Currency
  }

  export type EBankCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    account?: SortOrder
    cbu?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    available?: SortOrder
  }

  export type EBankMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    account?: SortOrder
    cbu?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    available?: SortOrder
  }

  export type EBankMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    account?: SortOrder
    cbu?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    available?: SortOrder
  }

  export type EnumCurrencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyWithAggregatesFilter<$PrismaModel> | $Enums.Currency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyFilter<$PrismaModel>
    _max?: NestedEnumCurrencyFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ECardCountOrderByAggregateInput = {
    id?: SortOrder
    available?: SortOrder
    commissionPercentage?: SortOrder
  }

  export type ECardAvgOrderByAggregateInput = {
    commissionPercentage?: SortOrder
  }

  export type ECardMaxOrderByAggregateInput = {
    id?: SortOrder
    available?: SortOrder
    commissionPercentage?: SortOrder
  }

  export type ECardMinOrderByAggregateInput = {
    id?: SortOrder
    available?: SortOrder
    commissionPercentage?: SortOrder
  }

  export type ECardSumOrderByAggregateInput = {
    commissionPercentage?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type EBankNullableScalarRelationFilter = {
    is?: EBankWhereInput | null
    isNot?: EBankWhereInput | null
  }

  export type ECardNullableScalarRelationFilter = {
    is?: ECardWhereInput | null
    isNot?: ECardWhereInput | null
  }

  export type EPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    voucherId?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    receivedAt?: SortOrder
    bankId?: SortOrder
    cardId?: SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EPaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    voucherId?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    receivedAt?: SortOrder
    bankId?: SortOrder
    cardId?: SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    voucherId?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    receivedAt?: SortOrder
    bankId?: SortOrder
    cardId?: SortOrder
    available?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EPaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EVoucherProductCreateNestedManyWithoutVoucherInput = {
    create?: XOR<EVoucherProductCreateWithoutVoucherInput, EVoucherProductUncheckedCreateWithoutVoucherInput> | EVoucherProductCreateWithoutVoucherInput[] | EVoucherProductUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: EVoucherProductCreateOrConnectWithoutVoucherInput | EVoucherProductCreateOrConnectWithoutVoucherInput[]
    createMany?: EVoucherProductCreateManyVoucherInputEnvelope
    connect?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
  }

  export type EPaymentCreateNestedManyWithoutVoucherInput = {
    create?: XOR<EPaymentCreateWithoutVoucherInput, EPaymentUncheckedCreateWithoutVoucherInput> | EPaymentCreateWithoutVoucherInput[] | EPaymentUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutVoucherInput | EPaymentCreateOrConnectWithoutVoucherInput[]
    createMany?: EPaymentCreateManyVoucherInputEnvelope
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
  }

  export type EVoucherProductUncheckedCreateNestedManyWithoutVoucherInput = {
    create?: XOR<EVoucherProductCreateWithoutVoucherInput, EVoucherProductUncheckedCreateWithoutVoucherInput> | EVoucherProductCreateWithoutVoucherInput[] | EVoucherProductUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: EVoucherProductCreateOrConnectWithoutVoucherInput | EVoucherProductCreateOrConnectWithoutVoucherInput[]
    createMany?: EVoucherProductCreateManyVoucherInputEnvelope
    connect?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
  }

  export type EPaymentUncheckedCreateNestedManyWithoutVoucherInput = {
    create?: XOR<EPaymentCreateWithoutVoucherInput, EPaymentUncheckedCreateWithoutVoucherInput> | EPaymentCreateWithoutVoucherInput[] | EPaymentUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutVoucherInput | EPaymentCreateOrConnectWithoutVoucherInput[]
    createMany?: EPaymentCreateManyVoucherInputEnvelope
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumVoucherTypeFieldUpdateOperationsInput = {
    set?: $Enums.VoucherType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumVoucherStatusFieldUpdateOperationsInput = {
    set?: $Enums.VoucherStatus
  }

  export type NullableEnumConditionPaymentFieldUpdateOperationsInput = {
    set?: $Enums.ConditionPayment | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableEnumVoucherTypeFieldUpdateOperationsInput = {
    set?: $Enums.VoucherType | null
  }

  export type EVoucherProductUpdateManyWithoutVoucherNestedInput = {
    create?: XOR<EVoucherProductCreateWithoutVoucherInput, EVoucherProductUncheckedCreateWithoutVoucherInput> | EVoucherProductCreateWithoutVoucherInput[] | EVoucherProductUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: EVoucherProductCreateOrConnectWithoutVoucherInput | EVoucherProductCreateOrConnectWithoutVoucherInput[]
    upsert?: EVoucherProductUpsertWithWhereUniqueWithoutVoucherInput | EVoucherProductUpsertWithWhereUniqueWithoutVoucherInput[]
    createMany?: EVoucherProductCreateManyVoucherInputEnvelope
    set?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
    disconnect?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
    delete?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
    connect?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
    update?: EVoucherProductUpdateWithWhereUniqueWithoutVoucherInput | EVoucherProductUpdateWithWhereUniqueWithoutVoucherInput[]
    updateMany?: EVoucherProductUpdateManyWithWhereWithoutVoucherInput | EVoucherProductUpdateManyWithWhereWithoutVoucherInput[]
    deleteMany?: EVoucherProductScalarWhereInput | EVoucherProductScalarWhereInput[]
  }

  export type EPaymentUpdateManyWithoutVoucherNestedInput = {
    create?: XOR<EPaymentCreateWithoutVoucherInput, EPaymentUncheckedCreateWithoutVoucherInput> | EPaymentCreateWithoutVoucherInput[] | EPaymentUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutVoucherInput | EPaymentCreateOrConnectWithoutVoucherInput[]
    upsert?: EPaymentUpsertWithWhereUniqueWithoutVoucherInput | EPaymentUpsertWithWhereUniqueWithoutVoucherInput[]
    createMany?: EPaymentCreateManyVoucherInputEnvelope
    set?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    disconnect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    delete?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    update?: EPaymentUpdateWithWhereUniqueWithoutVoucherInput | EPaymentUpdateWithWhereUniqueWithoutVoucherInput[]
    updateMany?: EPaymentUpdateManyWithWhereWithoutVoucherInput | EPaymentUpdateManyWithWhereWithoutVoucherInput[]
    deleteMany?: EPaymentScalarWhereInput | EPaymentScalarWhereInput[]
  }

  export type EVoucherProductUncheckedUpdateManyWithoutVoucherNestedInput = {
    create?: XOR<EVoucherProductCreateWithoutVoucherInput, EVoucherProductUncheckedCreateWithoutVoucherInput> | EVoucherProductCreateWithoutVoucherInput[] | EVoucherProductUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: EVoucherProductCreateOrConnectWithoutVoucherInput | EVoucherProductCreateOrConnectWithoutVoucherInput[]
    upsert?: EVoucherProductUpsertWithWhereUniqueWithoutVoucherInput | EVoucherProductUpsertWithWhereUniqueWithoutVoucherInput[]
    createMany?: EVoucherProductCreateManyVoucherInputEnvelope
    set?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
    disconnect?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
    delete?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
    connect?: EVoucherProductWhereUniqueInput | EVoucherProductWhereUniqueInput[]
    update?: EVoucherProductUpdateWithWhereUniqueWithoutVoucherInput | EVoucherProductUpdateWithWhereUniqueWithoutVoucherInput[]
    updateMany?: EVoucherProductUpdateManyWithWhereWithoutVoucherInput | EVoucherProductUpdateManyWithWhereWithoutVoucherInput[]
    deleteMany?: EVoucherProductScalarWhereInput | EVoucherProductScalarWhereInput[]
  }

  export type EPaymentUncheckedUpdateManyWithoutVoucherNestedInput = {
    create?: XOR<EPaymentCreateWithoutVoucherInput, EPaymentUncheckedCreateWithoutVoucherInput> | EPaymentCreateWithoutVoucherInput[] | EPaymentUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutVoucherInput | EPaymentCreateOrConnectWithoutVoucherInput[]
    upsert?: EPaymentUpsertWithWhereUniqueWithoutVoucherInput | EPaymentUpsertWithWhereUniqueWithoutVoucherInput[]
    createMany?: EPaymentCreateManyVoucherInputEnvelope
    set?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    disconnect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    delete?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    update?: EPaymentUpdateWithWhereUniqueWithoutVoucherInput | EPaymentUpdateWithWhereUniqueWithoutVoucherInput[]
    updateMany?: EPaymentUpdateManyWithWhereWithoutVoucherInput | EPaymentUpdateManyWithWhereWithoutVoucherInput[]
    deleteMany?: EPaymentScalarWhereInput | EPaymentScalarWhereInput[]
  }

  export type EVoucherCreateNestedOneWithoutProductsInput = {
    create?: XOR<EVoucherCreateWithoutProductsInput, EVoucherUncheckedCreateWithoutProductsInput>
    connectOrCreate?: EVoucherCreateOrConnectWithoutProductsInput
    connect?: EVoucherWhereUniqueInput
  }

  export type EVoucherUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<EVoucherCreateWithoutProductsInput, EVoucherUncheckedCreateWithoutProductsInput>
    connectOrCreate?: EVoucherCreateOrConnectWithoutProductsInput
    upsert?: EVoucherUpsertWithoutProductsInput
    connect?: EVoucherWhereUniqueInput
    update?: XOR<XOR<EVoucherUpdateToOneWithWhereWithoutProductsInput, EVoucherUpdateWithoutProductsInput>, EVoucherUncheckedUpdateWithoutProductsInput>
  }

  export type EPaymentCreateNestedManyWithoutBankInput = {
    create?: XOR<EPaymentCreateWithoutBankInput, EPaymentUncheckedCreateWithoutBankInput> | EPaymentCreateWithoutBankInput[] | EPaymentUncheckedCreateWithoutBankInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutBankInput | EPaymentCreateOrConnectWithoutBankInput[]
    createMany?: EPaymentCreateManyBankInputEnvelope
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
  }

  export type EPaymentUncheckedCreateNestedManyWithoutBankInput = {
    create?: XOR<EPaymentCreateWithoutBankInput, EPaymentUncheckedCreateWithoutBankInput> | EPaymentCreateWithoutBankInput[] | EPaymentUncheckedCreateWithoutBankInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutBankInput | EPaymentCreateOrConnectWithoutBankInput[]
    createMany?: EPaymentCreateManyBankInputEnvelope
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
  }

  export type EnumCurrencyFieldUpdateOperationsInput = {
    set?: $Enums.Currency
  }

  export type EPaymentUpdateManyWithoutBankNestedInput = {
    create?: XOR<EPaymentCreateWithoutBankInput, EPaymentUncheckedCreateWithoutBankInput> | EPaymentCreateWithoutBankInput[] | EPaymentUncheckedCreateWithoutBankInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutBankInput | EPaymentCreateOrConnectWithoutBankInput[]
    upsert?: EPaymentUpsertWithWhereUniqueWithoutBankInput | EPaymentUpsertWithWhereUniqueWithoutBankInput[]
    createMany?: EPaymentCreateManyBankInputEnvelope
    set?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    disconnect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    delete?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    update?: EPaymentUpdateWithWhereUniqueWithoutBankInput | EPaymentUpdateWithWhereUniqueWithoutBankInput[]
    updateMany?: EPaymentUpdateManyWithWhereWithoutBankInput | EPaymentUpdateManyWithWhereWithoutBankInput[]
    deleteMany?: EPaymentScalarWhereInput | EPaymentScalarWhereInput[]
  }

  export type EPaymentUncheckedUpdateManyWithoutBankNestedInput = {
    create?: XOR<EPaymentCreateWithoutBankInput, EPaymentUncheckedCreateWithoutBankInput> | EPaymentCreateWithoutBankInput[] | EPaymentUncheckedCreateWithoutBankInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutBankInput | EPaymentCreateOrConnectWithoutBankInput[]
    upsert?: EPaymentUpsertWithWhereUniqueWithoutBankInput | EPaymentUpsertWithWhereUniqueWithoutBankInput[]
    createMany?: EPaymentCreateManyBankInputEnvelope
    set?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    disconnect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    delete?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    update?: EPaymentUpdateWithWhereUniqueWithoutBankInput | EPaymentUpdateWithWhereUniqueWithoutBankInput[]
    updateMany?: EPaymentUpdateManyWithWhereWithoutBankInput | EPaymentUpdateManyWithWhereWithoutBankInput[]
    deleteMany?: EPaymentScalarWhereInput | EPaymentScalarWhereInput[]
  }

  export type EPaymentCreateNestedManyWithoutCardInput = {
    create?: XOR<EPaymentCreateWithoutCardInput, EPaymentUncheckedCreateWithoutCardInput> | EPaymentCreateWithoutCardInput[] | EPaymentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutCardInput | EPaymentCreateOrConnectWithoutCardInput[]
    createMany?: EPaymentCreateManyCardInputEnvelope
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
  }

  export type EPaymentUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<EPaymentCreateWithoutCardInput, EPaymentUncheckedCreateWithoutCardInput> | EPaymentCreateWithoutCardInput[] | EPaymentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutCardInput | EPaymentCreateOrConnectWithoutCardInput[]
    createMany?: EPaymentCreateManyCardInputEnvelope
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EPaymentUpdateManyWithoutCardNestedInput = {
    create?: XOR<EPaymentCreateWithoutCardInput, EPaymentUncheckedCreateWithoutCardInput> | EPaymentCreateWithoutCardInput[] | EPaymentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutCardInput | EPaymentCreateOrConnectWithoutCardInput[]
    upsert?: EPaymentUpsertWithWhereUniqueWithoutCardInput | EPaymentUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: EPaymentCreateManyCardInputEnvelope
    set?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    disconnect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    delete?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    update?: EPaymentUpdateWithWhereUniqueWithoutCardInput | EPaymentUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: EPaymentUpdateManyWithWhereWithoutCardInput | EPaymentUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: EPaymentScalarWhereInput | EPaymentScalarWhereInput[]
  }

  export type EPaymentUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<EPaymentCreateWithoutCardInput, EPaymentUncheckedCreateWithoutCardInput> | EPaymentCreateWithoutCardInput[] | EPaymentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: EPaymentCreateOrConnectWithoutCardInput | EPaymentCreateOrConnectWithoutCardInput[]
    upsert?: EPaymentUpsertWithWhereUniqueWithoutCardInput | EPaymentUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: EPaymentCreateManyCardInputEnvelope
    set?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    disconnect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    delete?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    connect?: EPaymentWhereUniqueInput | EPaymentWhereUniqueInput[]
    update?: EPaymentUpdateWithWhereUniqueWithoutCardInput | EPaymentUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: EPaymentUpdateManyWithWhereWithoutCardInput | EPaymentUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: EPaymentScalarWhereInput | EPaymentScalarWhereInput[]
  }

  export type EVoucherCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<EVoucherCreateWithoutPaymentsInput, EVoucherUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: EVoucherCreateOrConnectWithoutPaymentsInput
    connect?: EVoucherWhereUniqueInput
  }

  export type EBankCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<EBankCreateWithoutPaymentsInput, EBankUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: EBankCreateOrConnectWithoutPaymentsInput
    connect?: EBankWhereUniqueInput
  }

  export type ECardCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<ECardCreateWithoutPaymentsInput, ECardUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ECardCreateOrConnectWithoutPaymentsInput
    connect?: ECardWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type EVoucherUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<EVoucherCreateWithoutPaymentsInput, EVoucherUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: EVoucherCreateOrConnectWithoutPaymentsInput
    upsert?: EVoucherUpsertWithoutPaymentsInput
    connect?: EVoucherWhereUniqueInput
    update?: XOR<XOR<EVoucherUpdateToOneWithWhereWithoutPaymentsInput, EVoucherUpdateWithoutPaymentsInput>, EVoucherUncheckedUpdateWithoutPaymentsInput>
  }

  export type EBankUpdateOneWithoutPaymentsNestedInput = {
    create?: XOR<EBankCreateWithoutPaymentsInput, EBankUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: EBankCreateOrConnectWithoutPaymentsInput
    upsert?: EBankUpsertWithoutPaymentsInput
    disconnect?: EBankWhereInput | boolean
    delete?: EBankWhereInput | boolean
    connect?: EBankWhereUniqueInput
    update?: XOR<XOR<EBankUpdateToOneWithWhereWithoutPaymentsInput, EBankUpdateWithoutPaymentsInput>, EBankUncheckedUpdateWithoutPaymentsInput>
  }

  export type ECardUpdateOneWithoutPaymentsNestedInput = {
    create?: XOR<ECardCreateWithoutPaymentsInput, ECardUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ECardCreateOrConnectWithoutPaymentsInput
    upsert?: ECardUpsertWithoutPaymentsInput
    disconnect?: ECardWhereInput | boolean
    delete?: ECardWhereInput | boolean
    connect?: ECardWhereUniqueInput
    update?: XOR<XOR<ECardUpdateToOneWithWhereWithoutPaymentsInput, ECardUpdateWithoutPaymentsInput>, ECardUncheckedUpdateWithoutPaymentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumVoucherTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherType | EnumVoucherTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoucherTypeFilter<$PrismaModel> | $Enums.VoucherType
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumVoucherStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherStatus | EnumVoucherStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VoucherStatus[] | ListEnumVoucherStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoucherStatus[] | ListEnumVoucherStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVoucherStatusFilter<$PrismaModel> | $Enums.VoucherStatus
  }

  export type NestedEnumConditionPaymentNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ConditionPayment | EnumConditionPaymentFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConditionPayment[] | ListEnumConditionPaymentFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConditionPayment[] | ListEnumConditionPaymentFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConditionPaymentNullableFilter<$PrismaModel> | $Enums.ConditionPayment | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumVoucherTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherType | EnumVoucherTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumVoucherTypeNullableFilter<$PrismaModel> | $Enums.VoucherType | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumVoucherTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherType | EnumVoucherTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoucherTypeWithAggregatesFilter<$PrismaModel> | $Enums.VoucherType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVoucherTypeFilter<$PrismaModel>
    _max?: NestedEnumVoucherTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumVoucherStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherStatus | EnumVoucherStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VoucherStatus[] | ListEnumVoucherStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoucherStatus[] | ListEnumVoucherStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVoucherStatusWithAggregatesFilter<$PrismaModel> | $Enums.VoucherStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVoucherStatusFilter<$PrismaModel>
    _max?: NestedEnumVoucherStatusFilter<$PrismaModel>
  }

  export type NestedEnumConditionPaymentNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConditionPayment | EnumConditionPaymentFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConditionPayment[] | ListEnumConditionPaymentFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConditionPayment[] | ListEnumConditionPaymentFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConditionPaymentNullableWithAggregatesFilter<$PrismaModel> | $Enums.ConditionPayment | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumConditionPaymentNullableFilter<$PrismaModel>
    _max?: NestedEnumConditionPaymentNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumVoucherTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoucherType | EnumVoucherTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.VoucherType[] | ListEnumVoucherTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumVoucherTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.VoucherType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumVoucherTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumVoucherTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumCurrencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyFilter<$PrismaModel> | $Enums.Currency
  }

  export type NestedEnumCurrencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyWithAggregatesFilter<$PrismaModel> | $Enums.Currency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyFilter<$PrismaModel>
    _max?: NestedEnumCurrencyFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EVoucherProductCreateWithoutVoucherInput = {
    id?: string
    code: string
    description: string
    productId: string
    quantity: number
    price: number
  }

  export type EVoucherProductUncheckedCreateWithoutVoucherInput = {
    id?: string
    code: string
    description: string
    productId: string
    quantity: number
    price: number
  }

  export type EVoucherProductCreateOrConnectWithoutVoucherInput = {
    where: EVoucherProductWhereUniqueInput
    create: XOR<EVoucherProductCreateWithoutVoucherInput, EVoucherProductUncheckedCreateWithoutVoucherInput>
  }

  export type EVoucherProductCreateManyVoucherInputEnvelope = {
    data: EVoucherProductCreateManyVoucherInput | EVoucherProductCreateManyVoucherInput[]
    skipDuplicates?: boolean
  }

  export type EPaymentCreateWithoutVoucherInput = {
    id?: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    bank?: EBankCreateNestedOneWithoutPaymentsInput
    card?: ECardCreateNestedOneWithoutPaymentsInput
  }

  export type EPaymentUncheckedCreateWithoutVoucherInput = {
    id?: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    bankId?: string | null
    cardId?: string | null
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EPaymentCreateOrConnectWithoutVoucherInput = {
    where: EPaymentWhereUniqueInput
    create: XOR<EPaymentCreateWithoutVoucherInput, EPaymentUncheckedCreateWithoutVoucherInput>
  }

  export type EPaymentCreateManyVoucherInputEnvelope = {
    data: EPaymentCreateManyVoucherInput | EPaymentCreateManyVoucherInput[]
    skipDuplicates?: boolean
  }

  export type EVoucherProductUpsertWithWhereUniqueWithoutVoucherInput = {
    where: EVoucherProductWhereUniqueInput
    update: XOR<EVoucherProductUpdateWithoutVoucherInput, EVoucherProductUncheckedUpdateWithoutVoucherInput>
    create: XOR<EVoucherProductCreateWithoutVoucherInput, EVoucherProductUncheckedCreateWithoutVoucherInput>
  }

  export type EVoucherProductUpdateWithWhereUniqueWithoutVoucherInput = {
    where: EVoucherProductWhereUniqueInput
    data: XOR<EVoucherProductUpdateWithoutVoucherInput, EVoucherProductUncheckedUpdateWithoutVoucherInput>
  }

  export type EVoucherProductUpdateManyWithWhereWithoutVoucherInput = {
    where: EVoucherProductScalarWhereInput
    data: XOR<EVoucherProductUpdateManyMutationInput, EVoucherProductUncheckedUpdateManyWithoutVoucherInput>
  }

  export type EVoucherProductScalarWhereInput = {
    AND?: EVoucherProductScalarWhereInput | EVoucherProductScalarWhereInput[]
    OR?: EVoucherProductScalarWhereInput[]
    NOT?: EVoucherProductScalarWhereInput | EVoucherProductScalarWhereInput[]
    id?: StringFilter<"EVoucherProduct"> | string
    code?: StringFilter<"EVoucherProduct"> | string
    voucherId?: StringFilter<"EVoucherProduct"> | string
    description?: StringFilter<"EVoucherProduct"> | string
    productId?: StringFilter<"EVoucherProduct"> | string
    quantity?: IntFilter<"EVoucherProduct"> | number
    price?: FloatFilter<"EVoucherProduct"> | number
  }

  export type EPaymentUpsertWithWhereUniqueWithoutVoucherInput = {
    where: EPaymentWhereUniqueInput
    update: XOR<EPaymentUpdateWithoutVoucherInput, EPaymentUncheckedUpdateWithoutVoucherInput>
    create: XOR<EPaymentCreateWithoutVoucherInput, EPaymentUncheckedCreateWithoutVoucherInput>
  }

  export type EPaymentUpdateWithWhereUniqueWithoutVoucherInput = {
    where: EPaymentWhereUniqueInput
    data: XOR<EPaymentUpdateWithoutVoucherInput, EPaymentUncheckedUpdateWithoutVoucherInput>
  }

  export type EPaymentUpdateManyWithWhereWithoutVoucherInput = {
    where: EPaymentScalarWhereInput
    data: XOR<EPaymentUpdateManyMutationInput, EPaymentUncheckedUpdateManyWithoutVoucherInput>
  }

  export type EPaymentScalarWhereInput = {
    AND?: EPaymentScalarWhereInput | EPaymentScalarWhereInput[]
    OR?: EPaymentScalarWhereInput[]
    NOT?: EPaymentScalarWhereInput | EPaymentScalarWhereInput[]
    id?: StringFilter<"EPayment"> | string
    voucherId?: StringFilter<"EPayment"> | string
    method?: EnumPaymentMethodFilter<"EPayment"> | $Enums.PaymentMethod
    amount?: FloatFilter<"EPayment"> | number
    currency?: EnumCurrencyFilter<"EPayment"> | $Enums.Currency
    receivedAt?: DateTimeFilter<"EPayment"> | Date | string
    bankId?: StringNullableFilter<"EPayment"> | string | null
    cardId?: StringNullableFilter<"EPayment"> | string | null
    available?: BoolFilter<"EPayment"> | boolean
    createdAt?: DateTimeFilter<"EPayment"> | Date | string
    updatedAt?: DateTimeFilter<"EPayment"> | Date | string
  }

  export type EVoucherCreateWithoutProductsInput = {
    id?: string
    arcaCae?: string | null
    arcaDueDate?: string | null
    type: $Enums.VoucherType
    pointOfSale: number
    voucherNumber: number
    emissionDate?: Date | string
    dueDate?: Date | string | null
    status?: $Enums.VoucherStatus
    contactId?: string | null
    conditionPayment?: $Enums.ConditionPayment | null
    totalAmount?: number | null
    ivaAmount?: number | null
    paidAmount?: number
    observation?: string | null
    available?: boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: number | null
    associatedVoucherType?: $Enums.VoucherType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Payments?: EPaymentCreateNestedManyWithoutVoucherInput
  }

  export type EVoucherUncheckedCreateWithoutProductsInput = {
    id?: string
    arcaCae?: string | null
    arcaDueDate?: string | null
    type: $Enums.VoucherType
    pointOfSale: number
    voucherNumber: number
    emissionDate?: Date | string
    dueDate?: Date | string | null
    status?: $Enums.VoucherStatus
    contactId?: string | null
    conditionPayment?: $Enums.ConditionPayment | null
    totalAmount?: number | null
    ivaAmount?: number | null
    paidAmount?: number
    observation?: string | null
    available?: boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: number | null
    associatedVoucherType?: $Enums.VoucherType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Payments?: EPaymentUncheckedCreateNestedManyWithoutVoucherInput
  }

  export type EVoucherCreateOrConnectWithoutProductsInput = {
    where: EVoucherWhereUniqueInput
    create: XOR<EVoucherCreateWithoutProductsInput, EVoucherUncheckedCreateWithoutProductsInput>
  }

  export type EVoucherUpsertWithoutProductsInput = {
    update: XOR<EVoucherUpdateWithoutProductsInput, EVoucherUncheckedUpdateWithoutProductsInput>
    create: XOR<EVoucherCreateWithoutProductsInput, EVoucherUncheckedCreateWithoutProductsInput>
    where?: EVoucherWhereInput
  }

  export type EVoucherUpdateToOneWithWhereWithoutProductsInput = {
    where?: EVoucherWhereInput
    data: XOR<EVoucherUpdateWithoutProductsInput, EVoucherUncheckedUpdateWithoutProductsInput>
  }

  export type EVoucherUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    arcaCae?: NullableStringFieldUpdateOperationsInput | string | null
    arcaDueDate?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType
    pointOfSale?: IntFieldUpdateOperationsInput | number
    voucherNumber?: IntFieldUpdateOperationsInput | number
    emissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumVoucherStatusFieldUpdateOperationsInput | $Enums.VoucherStatus
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    conditionPayment?: NullableEnumConditionPaymentFieldUpdateOperationsInput | $Enums.ConditionPayment | null
    totalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    ivaAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAmount?: FloatFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: NullableFloatFieldUpdateOperationsInput | number | null
    associatedVoucherType?: NullableEnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Payments?: EPaymentUpdateManyWithoutVoucherNestedInput
  }

  export type EVoucherUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    arcaCae?: NullableStringFieldUpdateOperationsInput | string | null
    arcaDueDate?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType
    pointOfSale?: IntFieldUpdateOperationsInput | number
    voucherNumber?: IntFieldUpdateOperationsInput | number
    emissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumVoucherStatusFieldUpdateOperationsInput | $Enums.VoucherStatus
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    conditionPayment?: NullableEnumConditionPaymentFieldUpdateOperationsInput | $Enums.ConditionPayment | null
    totalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    ivaAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAmount?: FloatFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: NullableFloatFieldUpdateOperationsInput | number | null
    associatedVoucherType?: NullableEnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Payments?: EPaymentUncheckedUpdateManyWithoutVoucherNestedInput
  }

  export type EPaymentCreateWithoutBankInput = {
    id?: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    voucher: EVoucherCreateNestedOneWithoutPaymentsInput
    card?: ECardCreateNestedOneWithoutPaymentsInput
  }

  export type EPaymentUncheckedCreateWithoutBankInput = {
    id?: string
    voucherId: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    cardId?: string | null
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EPaymentCreateOrConnectWithoutBankInput = {
    where: EPaymentWhereUniqueInput
    create: XOR<EPaymentCreateWithoutBankInput, EPaymentUncheckedCreateWithoutBankInput>
  }

  export type EPaymentCreateManyBankInputEnvelope = {
    data: EPaymentCreateManyBankInput | EPaymentCreateManyBankInput[]
    skipDuplicates?: boolean
  }

  export type EPaymentUpsertWithWhereUniqueWithoutBankInput = {
    where: EPaymentWhereUniqueInput
    update: XOR<EPaymentUpdateWithoutBankInput, EPaymentUncheckedUpdateWithoutBankInput>
    create: XOR<EPaymentCreateWithoutBankInput, EPaymentUncheckedCreateWithoutBankInput>
  }

  export type EPaymentUpdateWithWhereUniqueWithoutBankInput = {
    where: EPaymentWhereUniqueInput
    data: XOR<EPaymentUpdateWithoutBankInput, EPaymentUncheckedUpdateWithoutBankInput>
  }

  export type EPaymentUpdateManyWithWhereWithoutBankInput = {
    where: EPaymentScalarWhereInput
    data: XOR<EPaymentUpdateManyMutationInput, EPaymentUncheckedUpdateManyWithoutBankInput>
  }

  export type EPaymentCreateWithoutCardInput = {
    id?: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    voucher: EVoucherCreateNestedOneWithoutPaymentsInput
    bank?: EBankCreateNestedOneWithoutPaymentsInput
  }

  export type EPaymentUncheckedCreateWithoutCardInput = {
    id?: string
    voucherId: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    bankId?: string | null
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EPaymentCreateOrConnectWithoutCardInput = {
    where: EPaymentWhereUniqueInput
    create: XOR<EPaymentCreateWithoutCardInput, EPaymentUncheckedCreateWithoutCardInput>
  }

  export type EPaymentCreateManyCardInputEnvelope = {
    data: EPaymentCreateManyCardInput | EPaymentCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type EPaymentUpsertWithWhereUniqueWithoutCardInput = {
    where: EPaymentWhereUniqueInput
    update: XOR<EPaymentUpdateWithoutCardInput, EPaymentUncheckedUpdateWithoutCardInput>
    create: XOR<EPaymentCreateWithoutCardInput, EPaymentUncheckedCreateWithoutCardInput>
  }

  export type EPaymentUpdateWithWhereUniqueWithoutCardInput = {
    where: EPaymentWhereUniqueInput
    data: XOR<EPaymentUpdateWithoutCardInput, EPaymentUncheckedUpdateWithoutCardInput>
  }

  export type EPaymentUpdateManyWithWhereWithoutCardInput = {
    where: EPaymentScalarWhereInput
    data: XOR<EPaymentUpdateManyMutationInput, EPaymentUncheckedUpdateManyWithoutCardInput>
  }

  export type EVoucherCreateWithoutPaymentsInput = {
    id?: string
    arcaCae?: string | null
    arcaDueDate?: string | null
    type: $Enums.VoucherType
    pointOfSale: number
    voucherNumber: number
    emissionDate?: Date | string
    dueDate?: Date | string | null
    status?: $Enums.VoucherStatus
    contactId?: string | null
    conditionPayment?: $Enums.ConditionPayment | null
    totalAmount?: number | null
    ivaAmount?: number | null
    paidAmount?: number
    observation?: string | null
    available?: boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: number | null
    associatedVoucherType?: $Enums.VoucherType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: EVoucherProductCreateNestedManyWithoutVoucherInput
  }

  export type EVoucherUncheckedCreateWithoutPaymentsInput = {
    id?: string
    arcaCae?: string | null
    arcaDueDate?: string | null
    type: $Enums.VoucherType
    pointOfSale: number
    voucherNumber: number
    emissionDate?: Date | string
    dueDate?: Date | string | null
    status?: $Enums.VoucherStatus
    contactId?: string | null
    conditionPayment?: $Enums.ConditionPayment | null
    totalAmount?: number | null
    ivaAmount?: number | null
    paidAmount?: number
    observation?: string | null
    available?: boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: number | null
    associatedVoucherType?: $Enums.VoucherType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: EVoucherProductUncheckedCreateNestedManyWithoutVoucherInput
  }

  export type EVoucherCreateOrConnectWithoutPaymentsInput = {
    where: EVoucherWhereUniqueInput
    create: XOR<EVoucherCreateWithoutPaymentsInput, EVoucherUncheckedCreateWithoutPaymentsInput>
  }

  export type EBankCreateWithoutPaymentsInput = {
    id?: string
    name: string
    account?: string | null
    cbu?: string | null
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    available?: boolean
  }

  export type EBankUncheckedCreateWithoutPaymentsInput = {
    id?: string
    name: string
    account?: string | null
    cbu?: string | null
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    available?: boolean
  }

  export type EBankCreateOrConnectWithoutPaymentsInput = {
    where: EBankWhereUniqueInput
    create: XOR<EBankCreateWithoutPaymentsInput, EBankUncheckedCreateWithoutPaymentsInput>
  }

  export type ECardCreateWithoutPaymentsInput = {
    id?: string
    available?: boolean
    commissionPercentage?: number | null
  }

  export type ECardUncheckedCreateWithoutPaymentsInput = {
    id?: string
    available?: boolean
    commissionPercentage?: number | null
  }

  export type ECardCreateOrConnectWithoutPaymentsInput = {
    where: ECardWhereUniqueInput
    create: XOR<ECardCreateWithoutPaymentsInput, ECardUncheckedCreateWithoutPaymentsInput>
  }

  export type EVoucherUpsertWithoutPaymentsInput = {
    update: XOR<EVoucherUpdateWithoutPaymentsInput, EVoucherUncheckedUpdateWithoutPaymentsInput>
    create: XOR<EVoucherCreateWithoutPaymentsInput, EVoucherUncheckedCreateWithoutPaymentsInput>
    where?: EVoucherWhereInput
  }

  export type EVoucherUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: EVoucherWhereInput
    data: XOR<EVoucherUpdateWithoutPaymentsInput, EVoucherUncheckedUpdateWithoutPaymentsInput>
  }

  export type EVoucherUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    arcaCae?: NullableStringFieldUpdateOperationsInput | string | null
    arcaDueDate?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType
    pointOfSale?: IntFieldUpdateOperationsInput | number
    voucherNumber?: IntFieldUpdateOperationsInput | number
    emissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumVoucherStatusFieldUpdateOperationsInput | $Enums.VoucherStatus
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    conditionPayment?: NullableEnumConditionPaymentFieldUpdateOperationsInput | $Enums.ConditionPayment | null
    totalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    ivaAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAmount?: FloatFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: NullableFloatFieldUpdateOperationsInput | number | null
    associatedVoucherType?: NullableEnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: EVoucherProductUpdateManyWithoutVoucherNestedInput
  }

  export type EVoucherUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    arcaCae?: NullableStringFieldUpdateOperationsInput | string | null
    arcaDueDate?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType
    pointOfSale?: IntFieldUpdateOperationsInput | number
    voucherNumber?: IntFieldUpdateOperationsInput | number
    emissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumVoucherStatusFieldUpdateOperationsInput | $Enums.VoucherStatus
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    conditionPayment?: NullableEnumConditionPaymentFieldUpdateOperationsInput | $Enums.ConditionPayment | null
    totalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    ivaAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAmount?: FloatFieldUpdateOperationsInput | number
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    afipRequestData?: NullableJsonNullValueInput | InputJsonValue
    afipResponseData?: NullableJsonNullValueInput | InputJsonValue
    associatedVoucherNumber?: NullableFloatFieldUpdateOperationsInput | number | null
    associatedVoucherType?: NullableEnumVoucherTypeFieldUpdateOperationsInput | $Enums.VoucherType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: EVoucherProductUncheckedUpdateManyWithoutVoucherNestedInput
  }

  export type EBankUpsertWithoutPaymentsInput = {
    update: XOR<EBankUpdateWithoutPaymentsInput, EBankUncheckedUpdateWithoutPaymentsInput>
    create: XOR<EBankCreateWithoutPaymentsInput, EBankUncheckedCreateWithoutPaymentsInput>
    where?: EBankWhereInput
  }

  export type EBankUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: EBankWhereInput
    data: XOR<EBankUpdateWithoutPaymentsInput, EBankUncheckedUpdateWithoutPaymentsInput>
  }

  export type EBankUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    account?: NullableStringFieldUpdateOperationsInput | string | null
    cbu?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EBankUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    account?: NullableStringFieldUpdateOperationsInput | string | null
    cbu?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ECardUpsertWithoutPaymentsInput = {
    update: XOR<ECardUpdateWithoutPaymentsInput, ECardUncheckedUpdateWithoutPaymentsInput>
    create: XOR<ECardCreateWithoutPaymentsInput, ECardUncheckedCreateWithoutPaymentsInput>
    where?: ECardWhereInput
  }

  export type ECardUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: ECardWhereInput
    data: XOR<ECardUpdateWithoutPaymentsInput, ECardUncheckedUpdateWithoutPaymentsInput>
  }

  export type ECardUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    commissionPercentage?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ECardUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    commissionPercentage?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EVoucherProductCreateManyVoucherInput = {
    id?: string
    code: string
    description: string
    productId: string
    quantity: number
    price: number
  }

  export type EPaymentCreateManyVoucherInput = {
    id?: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    bankId?: string | null
    cardId?: string | null
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EVoucherProductUpdateWithoutVoucherInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type EVoucherProductUncheckedUpdateWithoutVoucherInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type EVoucherProductUncheckedUpdateManyWithoutVoucherInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type EPaymentUpdateWithoutVoucherInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bank?: EBankUpdateOneWithoutPaymentsNestedInput
    card?: ECardUpdateOneWithoutPaymentsNestedInput
  }

  export type EPaymentUncheckedUpdateWithoutVoucherInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankId?: NullableStringFieldUpdateOperationsInput | string | null
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EPaymentUncheckedUpdateManyWithoutVoucherInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankId?: NullableStringFieldUpdateOperationsInput | string | null
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EPaymentCreateManyBankInput = {
    id?: string
    voucherId: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    cardId?: string | null
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EPaymentUpdateWithoutBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher?: EVoucherUpdateOneRequiredWithoutPaymentsNestedInput
    card?: ECardUpdateOneWithoutPaymentsNestedInput
  }

  export type EPaymentUncheckedUpdateWithoutBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    voucherId?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EPaymentUncheckedUpdateManyWithoutBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    voucherId?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EPaymentCreateManyCardInput = {
    id?: string
    voucherId: string
    method: $Enums.PaymentMethod
    amount: number
    currency: $Enums.Currency
    receivedAt?: Date | string
    bankId?: string | null
    available?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EPaymentUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher?: EVoucherUpdateOneRequiredWithoutPaymentsNestedInput
    bank?: EBankUpdateOneWithoutPaymentsNestedInput
  }

  export type EPaymentUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    voucherId?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankId?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EPaymentUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    voucherId?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankId?: NullableStringFieldUpdateOperationsInput | string | null
    available?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}